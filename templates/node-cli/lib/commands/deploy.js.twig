const { Command } = require("commander");
const { questionsDeployFunctions, questionsGetCommand } = require("../questions");
const inquirer = require("inquirer");
const { localConfig } = require("../config");
const { actionRunner, success, log, error } = require("../parser");
const { functionsGet, functionsCreate, functionsCreateTag, functionsUpdateTag } = require('./functions');

const deploy = new Command("deploy").description(
    "Deploy functions, collections and sites. "
);

const deployFunctions = async () => {
    let response = {};

    let answers = await inquirer.prompt(questionsDeployFunctions)
    let functions = answers.functions

    for (let func of functions) {
        log(`Deploying function ${func.name} ( ${func['$id']} )`)

        try {
            await functionsGet({
                functionId: func['$id'],
                parseOutput: false,
            })
        } catch (e) {
            if (e.code == 404) {
                log(`Function ${func.name} does not exist in the project. Creating ... `);
                response = await functionsCreate({
                    functionId: 'unique()',
                    name: func.name,
                    runtime: func.runtime,
                    parseOutput: false
                })

                localConfig.updateFunction(func['$id'], {
                    "$id": response['$id'],
                });

                func["$id"] = response['$id'];
                log(`Function ${func.name} created.`);
            } else {
                throw e;
            }
        }

        // Create tag
        if (!func.command) {
            answers = await inquirer.prompt(questionsGetCommand)
            func.command = answers.command;
            localConfig.updateFunction(func['$id'], func);
        }

        try {
            response = await functionsCreateTag({
                functionId: func['$id'],
                command: func.command,
                code: func.path,
                parseOutput: false
            })

            let tag = response['$id'];

            await functionsUpdateTag({
                functionId: func['$id'],
                tag,
                parseOutput: false
            })

            success(`Deployed ${func.name} ( ${func['$id']} )`);

        } catch (e) {
            switch (e.code) {
                case 'ENOENT': 
                    error(`Function ${func.name} ( ${func['$id']} ) not found in the current directory. Skipping ...`);
                    break;
                default:
                    throw e;
            }
        }
    }
}

deploy
    .command("functions")
    .description("Deploy functions in the current directory")
    .action(actionRunner(deployFunctions));

module.exports = {
    deploy
}