const { Command } = require("commander");
const { questionsInitProject, questionsInitFunction } = require("../questions");
const inquirer = require("inquirer");
const { sdkForConsole, sdkForProject } = require("../sdks");
const { localConfig } = require("../config");
const childProcess = require('child_process');

const init = new Command("init").description(
  "Initialise different parts of your Appwrite setup "
);

init
  .command("project")
  .description("Initialise your Appwrite project")
  .action(async () => {
    const client = await sdkForConsole();
    let payload = {}
    let response = {}

    let answers = await inquirer.prompt(questionsInitProject)
    if (!answers.override) process.exit(1)

    let path = "/teams";
    if (answers.start == "new") {
      payload["name"] = answers.project
      response = await client.call("post", path, {
        "content-type": "application/json",
      }, payload);

      let teamId = response['$id'];
      path = "/projects"
      payload["teamId"] = teamId

      response = await client.call("post", path, {
        "content-type": "application/json",
      }, payload);

      localConfig.setProject(response['$id'], response.name);
    } else {
      localConfig.setProject(answers.project.id, answers.project.name);
    }
  });


init
  .command("function")
  .description("Initialise your Appwrite cloud function")
  .action(async () => {
    console.log("Creating function")
    let answers = await inquirer.prompt(questionsInitFunction)

    let path = "/functions"
    let payload = {}

    payload["name"] = answers.name
    payload["runtime"] = answers.runtime

    let client = await sdkForProject();
    let response = await client.call("post", path, {
      "content-type": "application/json",
    }, payload);

    let command = `
      mkdir -m 777 -p '${answers.name}' && \
      cd '${answers.name}' && \
      git init && \
      git remote add -f origin https://github.com/christyjacob4/appwrite-function-starter && \
      git config core.sparseCheckout true && \
      echo '${answers.runtime}' >> .git/info/sparse-checkout && \ 
      git pull origin main && \
      rm -rf .git && \
      mv ${answers.runtime}/* . && \
      rm -rf ${answers.runtime}`;

    // Execute the child process but do not print any std output
    childProcess.execSync(command, { stdio: null});

    let data = {
      $id: response['$id'],
      name: response['name'],
      runtime: response['runtime'],
      path: "$name",
      command: '',
      vars: []
    };
    localConfig.addFunction(data);
  })

module.exports = {
  init,
};
