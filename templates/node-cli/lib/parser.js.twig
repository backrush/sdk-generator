const chalk = require('chalk');
var Table = require('cli-table');

const parse = (data) => {
    if (data.hasOwnProperty('sum')) {
        for (let key in data) {
            if (Array.isArray(data[key]) && typeof data[key] === 'object') {
                drawTable(data[key]);
            } else if (typeof data[key] === 'object') {
                parse(data[key]);
            } else {
                console.log(key + ': ' + data[key]);
            }
        }
    } else {
        drawJSON(data);
    }
    success()
}

const drawTable = (data) => {
    if (data.length == 0) {
        return;
    }

    let columns = Object.keys(data[0]);
    let table = new Table({
        head: columns,
        chars: {
            'top': '═', 'top-mid': '╤', 'top-left': '╔', 'top-right': '╗'
            , 'bottom': '═', 'bottom-mid': '╧', 'bottom-left': '╚', 'bottom-right': '╝'
            , 'left': '║', 'left-mid': '╟', 'mid': '─', 'mid-mid': '┼'
            , 'right': '║', 'right-mid': '╢', 'middle': '│'
        }
    });

    data.forEach(row => {
        let rowValues = [];
        for (let key in row) {
            if (Array.isArray(row[key])) {
                rowValues.push(`array(${row[key].length})`);
            } else if (typeof row[key] === 'object') {
                rowValues.push("object");
            } else if (!row[key]) {
                rowValues.push("---");
            } else {
                rowValues.push(row[key]);
            }
        }
        table.push(rowValues);
    });
    console.log(table.toString());
}

const drawJSON = (data) => {
    console.log(JSON.stringify(data, null, 2));
}

const parseError = (err) => {
    error(err.message)
    process.exit(1)
}

const actionRunner= (fn) => {
    return (...args) => fn(...args).catch(parseError);
}

const log = (message) => {
    console.log(`${chalk.cyan.bold("[ INFO ]")} ${chalk.cyan(message ?? "")}`);
}

const success = (message) => {
    console.log(`${chalk.green.bold("[ SUCCESS ]")} ${chalk.green(message ?? "")}`);   
}

const error = (message) => {
    console.error(`${chalk.red.bold("[ ERROR ]")} ${chalk.red(message ?? "")}`);
}

module.exports = {
    parse,
    actionRunner,
    log,
    success,
    error
}