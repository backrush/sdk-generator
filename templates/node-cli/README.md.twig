# {{ spec.title }} {{sdk.name}} SDK

![License](https://img.shields.io/github/license/{{ sdk.gitUserName|url_encode }}/{{ sdk.gitRepoName|url_encode }}.svg?style=flat-square)
![Version](https://img.shields.io/badge/api%20version-{{ spec.version|url_encode }}-blue.svg?style=flat-square)
[![Build Status](https://img.shields.io/travis/com/appwrite/sdk-generator?style=flat-square)](https://travis-ci.com/appwrite/sdk-generator)
{% if sdk.twitterHandle %}
[![Twitter Account](https://img.shields.io/twitter/follow/{{ sdk.twitterHandle }}?color=00acee&label=twitter&style=flat-square)](https://twitter.com/{{ sdk.twitterHandle }})
{% endif %}
{% if sdk.discordChannel %}
[![Discord](https://img.shields.io/discord/{{ sdk.discordChannel }}?label=discord&style=flat-square)]({{ sdk.discordUrl }})
{% endif %}
{% if sdk.warning %}

{{ sdk.warning }}
{% endif %}

{{ sdk.description }}

{% if sdk.logo %}
![{{ spec.title }}]({{ sdk.logo }})
{% endif %}

## Installation

The Appwrite CLI is a Node based command line tool designed to help you interact with the Appwrite API. The CLI is distrubuted both as an npm package as well as a pre built binary for specific operating systems and architectures.

### Using NPM
---

If you have `npm` installed, it's as easy as running

```sh
$ npm install -g appwrite-cli
```

Once the installation is complete, you can verify the install using

```sh
$ appwrite -v
0.0.9
```

### Using the install script
---

If you do not have npm installed, you can always install the prebult binaries for your architecture and OS.

### Linux / MacOS 
```bash
$ wget -q https://appwrite.io/cli/install.sh  -O - | /bin/bash
```

### Windows
```powershell
$ iwr -useb https://appwrite.io/cli/install.ps1 | iex
```

Once the installation completes, you can verify your install using
```
$ appwrite -v
0.0.9
```

## Initialisation 

The CLI needs to be initialised before you can use it with your Appwrite project. This can be done using 

```sh
$ appwrite init project
```

The following prompt will guide you through the setup process.

### 1. Pass in the project settings along with ` init`

```sh
$  init --endpoint="YOUR ENDPOINT" --project="YOUR PROJECT ID" --key="YOUR API KEY" --locale="YOUR LOCALE"
```

If any of the required values are missing, a prompt will show up, asking for those missing values.

### 2. Using the prompt

Invoking ` init` without any params triggers an interactive prompt where you can manually enter the details. These values are saved locally so that you dont have to re-enter them everytime. 

### Note
By default, requests to domains with self signed SSL certificates (or no certificates) are disabled. If you trust the domain, you can bypass the certificate validation by using
```sh
$  client setSelfSigned --value=true 
```

## Usage 

The Appwrite CLI follows the following general syntax.
```sh
$  [SERVICE] [COMMAND] --[OPTIONS]
```

A few sample commands to get you started 

```sh
$  users create --email="hello@appwrite.io" --password="very_strong_password"
$  users list 
```

To create a Document you can use the following command 
```sh
$  database createDocument --collectionId="YOUR COLLECTION ID" --data='A VALID JSON STRING' --read=role:member --read="*" --write=role:guest
```

### Some Gotchas
- `data` expects the JSON string to be escaped.
- If using the wildcard (`*`) read or write permissions , make sure that it is properly escaped using a `\` or by enclosing it in `"*"` since bash interprets them differently.
- Some arguments like `read` and `write` permissions are expected to be arrays. In the Appwrite CLI, arrays are passed by simply repeating the argument as seen in the `createDocument` example above.

To get information about the different services available, you can use 
```sh
$  help
```

To get information about a particular service and the commands available in a service you can use 
```sh
$  users help
$  accounts help
```

To get information about a particular command and the parameters it accepts, you can use

```sh
$  users list --help
$  account get --help 
```

## Contribution

This library is auto-generated by Appwrite custom [SDK Generator](https://github.com/appwrite/sdk-generator). To learn more about how you can help us improve this SDK, please check the [contribution guide](https://github.com/appwrite/sdk-generator/blob/master/CONTRIBUTING.md) before sending a pull-request.

To build and test the CLI for development, follow these steps 

1. Clone the SDK Generator
```sh
$ git clone https://github.com/appwrite/sdk-generator
```

2. Ensure that docker is running locally and then run 
```sh 
$ cd sdk-generator

# Install the composer dependencies
$ docker run --rm --interactive --tty --volume "$(pwd)":/app composer install --ignore-platform-reqs --optimize-autoloader --no-plugins --no-scripts --prefer-dist

# Generate the SDKs
$ docker run --rm -v $(pwd):/app -w /app php:7.4-cli php example.php
```

3. Head over to the generated SDK and build the CLI docker image 
```sh
$ cd examples/CLI
$ docker build -t appwrite/cli .
```

4. Install the CLI

MacOS and Linux

Open `install.sh` and change [this line](https://github.com/appwrite/sdk-for-cli/blob/master/install.sh#L33) to `APPWRITE_CLI_IMAGE_VERSION=latest` and 
comment [these lines](https://github.com/appwrite/sdk-for-cli/blob/master/install.sh#L119-L123). 

You can now install the CLI using 
```sh
$ chmod +x install.sh
$ ./install.sh
```

Windows

Open `install.ps1` and change [this line](https://github.com/appwrite/sdk-for-cli/blob/master/install.ps1#L28) to `APPWRITE_CLI_IMAGE_VERSION=latest` and 
comment [these lines](https://github.com/appwrite/sdk-for-cli/blob/master/install.ps1#L85-L89)

You can now install the CLI using 
```sh
$ ./install.ps1
```

## License

Please see the [{{spec.licenseName}} license]({{spec.licenseURL}}) file for more information.