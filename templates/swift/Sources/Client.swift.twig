//
// Client.swift
//
// Created by Armino <devel@boioiong.com>
// GitHub: https://github.com/armino-dev/sdk-generator
//

import Foundation
import AsyncHTTPClient

open class Client {

    // MARK: Properties

    open var selfSigned = false

    open var endpoint = "{{spec.endpoint}}"

    open var headers: [String: String] = [
      "content-type": "",
      "x-sdk-version": "{{spec.title | caseDash}}:{{ language.name | caseLower }}:{{ sdk.version }}"{% if spec.global.defaultHeaders | length > 0 %},{% endif %}

{% for key,header in spec.global.defaultHeaders %}
      "{{key}}": "{{header}}"{% if not loop.last %},{% endif %}
{% endfor %}
    
    ]

    open var config: [String: String] = [:]

    open var http: HTTPClient

    // MARK: Methods

    // Default constructor
    public init() {
        let timeout = HTTPClient.Configuration.Timeout(
            connect: .seconds(30),
            read: .seconds(30))

        let redirects = HTTPClient.Configuration.RedirectConfiguration
            .follow(max: 5, allowCycles: false)

        http = HTTPClient(
            eventLoopGroupProvider: .createNew,
            configuration: HTTPClient.Configuration(
            redirectConfiguration: redirects,
            timeout: timeout,
            decompression: .enabled(limit: .none)))
    }

    deinit {
        do {
            try http.syncShutdown()
        } catch {
            print(error)
        }
    }

{% for header in spec.global.headers %}
    ///
    /// Set {{header.key | caseUcfirst}}
    ///
{% if header.description %}
    /// {{header.description}}
    ///
{% endif %}
    /// @param String value
    ///
    /// @return Client
    ///
    open func set{{header.key | caseUcfirst}}(_ value: String) -> Client {
        config["{{ header.key | caseLower }}"] = value
        _ = addHeader(key: "{{header.name}}", value: value)
        return self
    }

{% endfor %}

    ///
    /// Set self signed
    ///
    /// @param Bool status
    ///
    /// @return Client
    ///
    open func setSelfSigned(_ status: Bool = true) -> Client {
        self.selfSigned = status
        return self
    }

    ///
    /// Set endpoint
    ///
    /// @param String endpoint
    ///
    /// @return Client
    ///
    open func setEndpoint(_ endpoint: String) -> Client {
        self.endpoint = endpoint
        return self
    }

    ///
    /// Add header
    ///
    /// @param String key
    /// @param String value
    ///
    /// @return Client
    ///
    open func addHeader(key: String, value: String) -> Client {
        self.headers[key.lowercased()] = value
        return self
    }

    ///
    /// Build query URL
    ///
    /// @param Dictionary<String, Any> params
    /// @param String prefix
    ///
    /// @return String
    ///
    open func httpBuildQuery(params: [String: Any], prefix: String = "") -> String {
        var output: String = ""

        for (key, value) in params {
            let finalKey: String = prefix.isEmpty
                ? key
                : (prefix + "[" + key + "]")

            switch value {
                case nil:
                    break
                case is AnyCollection<Any>:
                    output += self.httpBuildQuery(
                        params: value as! [String : Any],
                        prefix: finalKey)
                default:
                    output += "\(value)"
            }
            output += "&"
        }

        return output
    }

    ///
    /// Make an API call
    ///
    /// @param String method
    /// @param String path
    /// @param Dictionary<String, Any?> params
    /// @param Dictionary<String, String> headers
    /// @return Response
    /// @throws Exception
    ///
    func call(method: String, path: String = "", headers: [String: String] = [:], params: [String: Any?] = [:]) throws -> HTTPClient.Response {
        self.headers.merge(headers) { (_, new) in new }

        let queryParameters = method == "GET" && !params.isEmpty
            ? "?" + httpBuildQuery(params: params)
            : ""

        let targetURL = URL(string: endpoint + path + queryParameters)!

        var request = try HTTPClient.Request(
            url: targetURL,
            method: .RAW(value: method)
        )

        for (key, value) in self.headers {
            request.headers.add(name: key, value: value)
        }

        switch (self.headers["content-type"]) {
        case "multipart/form-data":
            // TODO: Form data
            break
        default:
            if (method == "GET") {
                break
            }
            let json = try JSONSerialization.data(
                withJSONObject: params,
                options: [])

            request.body = .data(json)
        }

        return try http.execute(request: request).wait()
    }
}

extension Client {

    public enum HTTPStatus: Int {
      case unknown = -1
      case ok = 200
      case created = 201
      case accepted = 202
      case movedPermanently = 301
      case found = 302
      case badRequest = 400
      case notAuthorized = 401
      case paymentRequired = 402
      case forbidden = 403
      case notFound = 404
      case methodNotAllowed = 405
      case notAcceptable = 406
      case internalServerError = 500
      case notImplemented = 501
    }
}
