{% macro methodNeedsSecurityParameters(method) %}
{% if (method.type == "webAuth" or method.type == "location") and method.security|length > 0 %}{{ true }}{% else %}{{false}}{% endif %}
{% endmacro %}
import AsyncHTTPClient
import Foundation
import NIO

open class {{ service.name | caseUcfirst }}: Service
{
{% for method in service.methods %}
    /**
     * {{ method.title }}
     *
{% if method.description %}
{{ method.description|comment1 }}
     *
{% endif %}
{% for parameter in method.parameters.all %}
     * @param {{ parameter.type | typeName | raw}} {{ parameter.name | caseCamel }}
{% endfor %}
     * @throws Exception
     * @return array
     */
{% if method.type == "webAuth" %}
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
{% endif %}
    open func {{ method.name | caseCamel }}({% for parameter in method.parameters.all %}_ {{ parameter.name | caseCamel }}: {{ parameter.type | typeName | raw }}{{ parameter | paramDefault }}{% if not loop.last %}, {% endif %}{% endfor %}) throws{% if method.type != "webAuth" %} -> HTTPClient.Response{% endif %} {
        {% if method.parameters.path %}var{% else %}let{% endif %} path: String = "{{ method.path }}"

{% for parameter in method.parameters.path %}
        path = path.replacingOccurrences(
          of: "{{ '{' }}{{ parameter.name | caseCamel }}{{ '}' }}",
          with: {% if method.parameters.path %}{{ parameter.name | caseCamel }}{% else %}""{% endif %}

        )

{% endfor %}
{% if method.parameters.query or method.parameters.body or method.parameters.formData or  _self.methodNeedsSecurityParameters(method) %}
        let params: [String: Any?] = [
{% else %}
        let params: [String: Any?] = [:]
{% endif %}
{% for parameter in method.parameters.query | merge(method.parameters.body) %}
            "{{ parameter.name }}": {{ parameter.name | caseCamel }}{% if not loop.last or _self.methodNeedsSecurityParameters(method) %},{% endif %}

{% endfor %}
{% if _self.methodNeedsSecurityParameters(method) %}
{% for node in method.security %}
{% for key,header in node|keys %}
            "{{header|caseLower}}": client.config["{{header|caseLower}}"]{% if not loop.last %},{% endif %}

{% endfor %}
{% endfor %}
{% endif %}
{% if method.parameters.query or method.parameters.body or method.parameters.formData or _self.methodNeedsSecurityParameters(method) %}
        ]
{% endif %}

{% if method.type == 'webAuth' %}
        let query = "?\(client.httpBuildQuery(params: params))"

        let url = URL(string: client.endpoint + path + query)!
        let callbackUrlScheme = "appwrite-callback-\(client.config["project"] ?? "")"

        WebAuthComponent.authenticate(url: url, callbackScheme: callbackUrlScheme) { result in
            switch result {
            case .success(let response):
                print(response)
            case .failure(let error):
                print(error)
            }
        }
{% elseif method.type == 'location' %}
        return try client.call(method: "{{ method.method | caseUpper }}", path: path, params: params)
{% else %}
        let headers: [String: String] = [
{{ method.headers|map((header, key) => "            \"#{key}\": \"#{header}\"")|join(',\n')|raw }}
        ]

        return try client.call(method: "{{ method.method | caseUpper }}", path: path, headers: headers, params: params)
{% endif %}
    }

{% endfor %}
}
