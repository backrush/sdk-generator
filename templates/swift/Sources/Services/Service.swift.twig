

class {{ service.name | caseUcfirst }}: Service
{
{% for method in service.methods %}
    /**
     * {{ method.title }}
     *
{% if method.description %}
{{ method.description|comment1 }}
     *
{% endif %}
{% for parameter in method.parameters.all %}
     * @param {{ parameter.type | typeName }} {{ parameter.name | caseCamel }}
{% endfor %}
     * @throws Exception
     * @return array
     */

    func {{ method.name | caseCamel }}({% for parameter in method.parameters.all %}{{ parameter.name | caseCamel }}: {{ parameter.type | typeName }}{{ parameter | paramDefault }}{% if not loop.last %}, {% endif %}{% endfor %})-> Array<Any> {
        let methodPath = "{{ method.path }}"
        let path = methodPath.replacingOccurrences(
          of: "[{% for parameter in method.parameters.path %}'//{{ '{' }}{{ parameter.name | caseCamel }}{{ '}' }}'{% if not loop.last %}, {% endif %}{% endfor %}]",
          with: "{% for parameter in method.parameters.path %}${{ parameter.name | caseCamel }}{% if not loop.last %}, {% endif %}{% endfor %}",
          options: .regularExpression,
          range: nil
        )
        let params = []

{% for parameter in method.parameters.query %}
        params["{{ parameter.name }}"] = {{ parameter.name | caseCamel }}
{% endfor %}
{% for parameter in method.parameters.body %}
        params["{{ parameter.name }}"] = {{ parameter.name | caseCamel }}
{% endfor %}
{% for parameter in method.parameters.formData %}
        params["{{ parameter.name }}"] = {{ parameter.name | caseCamel }}
{% endfor %}

        return self.client.call(HTTPMethod.{{ method.method }}, path, [
{% for parameter in method.parameters.header %}
            "{{ parameter.name }}": {{ parameter.name | caseCamel }},
{% endfor %}
{% for key, header in method.headers %}
            "{{ key }}": "{{ header }}",
{% endfor %}
        ], params);
    }

{% endfor %}
}
