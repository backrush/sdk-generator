extension Promise {

    ///
    /// Bind a result callback to this promise. If the promise has succeeded or eventually succeeds,
    /// the given function will execute with the result as a parameter.
    ///
    /// - Parameter work: The callback to execute on task success, returning a promise for chaining.
    /// - Returns: A new promise for chaining.
    ///
    @discardableResult
    public func then<Result>(_ work: @escaping (Value) throws -> Promise<Result>) -> Promise<Result> {
        do {
            guard let result = result else {
                return Promise<Result>(result: nil)
            }

            switch result {
            case .failure(let error): return Promise<Result>(error: error)
            case .success(let value): return try work(value)
            }
        } catch let error {
            return Promise<Result>(error: error)
        }
    }

    ///
    /// Bind a result callback to this promise. If the promise has succeeded or eventually succeeds,
    /// the given function will execute with the result as a parameter.
    ///
    /// - Parameter work: The callback to execute on task success, returning a result to chain in a new promise.
    /// - Returns: A new promise for chaining.
    ///
    @discardableResult
    public func then<Result>(_ work: @escaping (Value) throws -> Result) -> Promise<Result> {
        Promise<Result> { resolve, reject in
            guard let result = self.result else {
                return
            }

            switch result {
            case .failure(let error): reject(error)
            case .success(let value): resolve(try work(value))
            }
        }
    }

}