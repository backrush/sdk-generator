import SwiftUI

@available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
extension View {
    public func registerOAuthHandler() -> some View {
        onOpenURL { url in
            handleIncomingCookie(from: url)
        }.onReceive(NotificationCenter.default.publisher(for: UIApplication.willEnterForegroundNotification)) { _ in
            WebAuthComponent.onCallback()
        }
    }
}

extension AppDelegate {
    public func application(
        _ application: UIApplication,
        open url: URL,
        options: [UIApplicationOpenURLOptionsKey : Any] = [:]
    ) -> Bool {
        handleIncomingCookie(from: url)
    }
}

private func handleIncomingCookie(from url: URL) {
    let components = URLComponents(string: url.absoluteString)!

    let cookieParts = [String: String](uniqueKeysWithValues: components.queryItems!.map {
        ($0.name, $0.value!)
    })

    UserDefaults.standard.set(cookieParts["key"], forKey: "cookie-name-\(components.host!)")
    UserDefaults.standard.set(cookieParts["secret"], forKey: "cookie-value-\(components.host!)")

    WebAuthComponent.onCallback(
        scheme: components.scheme!,
        url: components.url!
    )
}

#if canImport(UIKit)
@available(iOS 14.0, tvOS 14.0, watchOS 7.0, *)
extension UIViewController {
    public func registerOAuthHandler() {
        self.addChild(UIHostingController(rootView: EmptyView().registerOAuthHandler()))
    }
}

#endif
#if canImport(AppKit)
@available(macOS 11.0, *)
extension NSViewController {
    public func registerOAuthHandler() {
        self.addChild(NSHostingController(rootView: EmptyView().registerOAuthHandler()))
    }
}
#endif
