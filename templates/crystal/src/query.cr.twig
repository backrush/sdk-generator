module {{spec.title | caseUcfirst}}
    class Query
        def self.equal(attribute : String, value)
            add_query(attribute, "equal", value)
        end

        def self.not_equal(attribute : String, value)
            add_query(attribute, "notEqual", value)
        end

        def self.less_than(attribute : String, value)
            add_query(attribute, "lessThan", value)
        end

        def self.less_than_equal(attribute : String, value)
            add_query(attribute, "lessThanEqual", value)
        end

        def self.greater_than(attribute : String, value)
            add_query(attribute, "greaterThan", value)
        end

        def self.greater_than_equal(attribute : String, value)
            add_query(attribute, "greaterThanEqual", value)
        end

        def self.is_null(attribute : String)
            "isNull(\"#{attribute}\")"
        end

        def self.is_not_null(attribute : String)
            "isNotNull(\"#{attribute}\")"
        end

        def self.between(attribute : String, start, ending)
            add_query(attribute, "between", [start, ending])
        end

        def self.starts_with(attribute : String, value)
            add_query(attribute, "startsWith", value)
        end

        def self.ends_with(attribute : String, value)
            add_query(attribute, "endsWith", value)
        end

        def self.select(attributes : Array(String))
            "select([#{attributes.map { |attribute| "\"#{attribute}\""}.join(',') }])"
        end

        def self.search(attribute : String, value)
            add_query(attribute, "search", value)
        end

        def self.order_asc(attribute : String)
            "orderAsc(\"#{attribute}\")"
        end

        def self.order_desc(attribute : String)
            "orderDesc(\"#{attribute}\")"
        end

        def self.cursor_before(id)
            "cursorBefore(\"#{id}\")"
        end

        def self.cursor_after(id)
            "cursorAfter(\"#{id}\")"
        end

        def self.limit(limit : UInt32)
            "limit(#{limit})"
        end

        def self.offset(offset : UInt32)
            "offset(#{offset})"
        end

        private def self.add_query(attribute : String, method : String, value)
            if value.is_a? Array
                "#{method}(\"#{attribute}\", [#{value.map {|item| parse_values(item)}.join(',')}])"
            else
               "#{method}(\"#{attribute}\", [#{parse_values(value)}])"
            end
        end

        private def self.parse_values(value)
            if value.is_a? String
                "\"#{value}\""
            else
                value
            end
        end
    end
end