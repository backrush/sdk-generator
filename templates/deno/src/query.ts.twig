type QueryTypesSingle = string | number | boolean;
export type QueryTypesList = string[] | number[] | boolean[];
export type QueryTypes = QueryTypesSingle | QueryTypesList;

type ModelType = {
    [key: string]: QueryTypes;
}

export type CustomQueryTypes<T extends ModelType> = {
  [K in keyof T]: [attribute: string & K, value: T[K] | T[K][]];
}[keyof T];

type betweenOverload = {
  <T extends ModelType>(attribute: string & keyof T, start: string, end: string): string,
  <T extends ModelType>(attribute: string & keyof T, start: number, end: number): string,
}

export class Query {
  static equal = <T extends ModelType>(...args: CustomQueryTypes<T>): string =>
    Query.addQuery(args[0], "equal", args[1]);

  static notEqual = <T extends ModelType>(...args: CustomQueryTypes<T>): string =>
    Query.addQuery(args[0], "notEqual", args[1]);

  static lessThan = <T extends ModelType>(...args: CustomQueryTypes<T>): string =>
    Query.addQuery(args[0], "lessThan", args[1]);

  static lessThanEqual = <T extends ModelType>(...args: CustomQueryTypes<T>): string =>
    Query.addQuery(args[0], "lessThanEqual", args[1]);

  static greaterThan = <T extends ModelType>(...args: CustomQueryTypes<T>): string =>
    Query.addQuery(args[0], "greaterThan", args[1]);

  static greaterThanEqual = <T extends ModelType>(...args: CustomQueryTypes<T>): string =>
    Query.addQuery(args[0], "greaterThanEqual", args[1]);

  static isNull = <T extends ModelType>(attribute: string&keyof T): string =>
    `isNull("${attribute}")`;

  static isNotNull = <T extends ModelType>(attribute: string&keyof T): string =>
    `isNotNull("${attribute}")`;

  static between: betweenOverload = <T extends ModelType>(attribute: string&keyof T, start: string|number, end: string|number): string =>
    `between("${attribute}", [${Query.parseValues(start)},${Query.parseValues(end)}])`;

  static startsWith = <T extends ModelType>(attribute: string&keyof T, value: string): string =>
    Query.addQuery(attribute, "startsWith", value);

  static endsWith = <T extends ModelType>(attribute: string&keyof T, value: string): string =>
    Query.addQuery(attribute, "endsWith", value);

  static select = <T extends ModelType>(attributes: (string&keyof T)[]): string =>
    `select([${attributes.map((attr: string) => `"${attr}"`).join(",")}])`;

  static search = <T extends ModelType>(attribute: string&keyof T, value: string): string =>
    Query.addQuery(attribute, "search", value);

  static orderDesc = <T extends ModelType>(attribute: string&keyof T): string =>
    `orderDesc("${attribute}")`;

  static orderAsc = <T extends ModelType>(attribute: string&keyof T): string =>
    `orderAsc("${attribute}")`;

  static cursorAfter = (documentId: string): string =>
    `cursorAfter("${documentId}")`;

  static cursorBefore = (documentId: string): string =>
    `cursorBefore("${documentId}")`;

  static limit = (limit: number): string =>
    `limit(${limit})`;

  static offset = (offset: number): string =>
    `offset(${offset})`;

  private static addQuery = <T extends ModelType>(attribute: CustomQueryTypes<T>[0], method: string, value: CustomQueryTypes<T>[1]): string =>
    value instanceof Array
      ? `${method}("${attribute}", [${value
          .map((v) => Query.parseValues(v))
          .join(",")}])`
      : `${method}("${attribute}", [${Query.parseValues(value)}])`;

  private static parseValues = (value: QueryTypes): string =>
    typeof value === "string" || value instanceof String
      ? `"${value}"`
      : `${value}`;
}