interface Payload {
    [key: string]: any;
}

class {{spec.title | caseUcfirst}}Exception extends Error {
    code: number;
    response: string;
    constructor(message: string, code: number = 0, response: string = '') {
        super(message);
        this.name = '{{spec.title | caseUcfirst}}Exception';
        this.message = message;
        this.code = code;
        this.response = response;
    }
}

class {{ spec.title | caseUcfirst }} {
    config = {
        endpoint: '{{ spec.endpoint }}',
{% for header in spec.global.headers %}
        {{ header.key | caseCamel }}: '',
{% endfor %}
    };
    headers: Headers = new Headers({
        'x-sdk-version': '{{spec.title | caseDash}}:{{ language.name | caseLower }}:{{ sdk.version }}',
{% for key,header in spec.global.defaultHeaders %}
        '{{key}}': '{{header}}',
{% endfor %}
    });

    /**
     * Set Endpoint
     *
     * Your project ID
     *
     * @param {string} endpoint
     *
     * @returns {this}
     */
    setEndpoint(endpoint: string): this {
        this.config.endpoint = endpoint;

        return this;
    }

{% for header in spec.global.headers %}
    /**
     * Set {{header.key | caseUcfirst}}
     *
{% if header.description %}
{{header.description|comment2}}
     *
{% endif %}
     * @param value string
     *
     * @return {this}
     */
    set{{header.key | caseUcfirst}}(value: string): this {
        this.headers.set('{{header.name}}', value);
        this.config.{{ header.key | caseCamel }} = value;
        return this;
    }

{% endfor %}
    private async call(method: string, url: URL, headers: Headers = new Headers(), params: Payload = {}): Promise<any> {
        method = method.toUpperCase();
        this.headers.forEach((value, key) => {
            headers.set(key, value);
        });
        let options: RequestInit = {
            method,
            headers,
            credentials: 'include'
        };

        if (window?.localStorage) {
            headers.set('X-Fallback-Cookies', window.localStorage.getItem('cookieFallback') ?? "");
        }

        if (method === 'GET') {
            url.search = new URLSearchParams(this.flatten(params)).toString();
        } else {
            switch (headers.get('content-type')) {
                case 'application/json':
                    options.body = JSON.stringify(params);
                    break;

                case 'multipart/form-data':
                    let formData = new FormData();

                    for (const key in params) {
                        formData.append(key + (Array.isArray(params[key]) ? '[]' : ''), params[key]);
                    }

                    options.body = formData;
                    headers.delete('content-type');
                    break;
            }
        }

        try {
            const response = await fetch(url.toString(), options);
            const data = await response.json();

            if (400 <= response.status) {
                throw new {{spec.title | caseUcfirst}}Exception(data.message, response.status, data);
            }

            const cookieFallback = response.headers.get('X-Fallback-Cookies');

            if (window?.localStorage && cookieFallback) {
                window.console.warn('Appwrite is using localStorage for session management. Increase your security by adding a custom domain as your API endpoint.');
                window.localStorage.setItem('cookieFallback', cookieFallback);
            }

            return data;
        } catch (e) {
            throw new {{spec.title | caseUcfirst}}Exception(e.message);
        }
    }

    private flatten(data: Payload, prefix = ''): Payload {
        let output: Payload = {};

        for (const key in data) {
            let value = data[key];
            let finalKey = prefix ? `${prefix}[${key}]` : key;

            if (Array.isArray(value)) {
                output = Object.assign(output, this.flatten(value, finalKey));
            }
            else {
                output[finalKey] = value;
            }
        }

        return output;
    }

{% for service in spec.services %}
    {{service.name | caseCamel}} = {
{% for method in service.methods %}

        /**
         * {{ method.title }}
         *
{% if method.description %}
{{ method.description|comment3 }}
{% endif %}
         *
{% for parameter in method.parameters.all %}
         * @param {{ '{' }}{{ parameter.type | typeName }}{{ '}' }} {{ parameter.name | caseCamel }}
{% endfor %}
         * @throws {{ '{' }}{{ spec.title | caseUcfirst}}Exception}
         * @returns {% if method.type == 'webAuth' %}{void|string}{% elseif method.type == 'location' %}{URL}{% else %}{Promise}{% endif %}

         */
        {{ method.name | caseCamel }}: {% if method.type != "location" and method.type != 'webAuth'%}async <T extends unknown>{% endif %}({% for parameter in method.parameters.all %}{{ parameter.name | caseCamel }}: {{ parameter.type | typeName }}{{ parameter | paramDefault }}{% if not loop.last %}, {% endif %}{% endfor %}): {% if method.type == 'webAuth' %}void | URL{% elseif method.type == 'location' %}URL{% else %}Promise<T>{% endif %} => {
{% for parameter in method.parameters.all %}
{% if parameter.required %}
            if ({{ parameter.name | caseCamel }} === undefined) {
                throw new {{spec.title | caseUcfirst}}Exception('Missing required parameter: "{{ parameter.name | caseCamel }}"');
            }

{% endif %}
{% endfor %}
            let path = '{{ method.path }}'{% for parameter in method.parameters.path %}.replace('{{ '{' }}{{ parameter.name | caseCamel }}{{ '}' }}', {{ parameter.name | caseCamel }}){% endfor %};
            let payload: Payload = {};

{% for parameter in method.parameters.query %}
            if ({{ parameter.name | caseCamel }}) {
                payload['{{ parameter.name }}'] = {{ parameter.name | caseCamel }};
            }

{% endfor %}
{% for parameter in method.parameters.body %}
            if (typeof {{ parameter.name | caseCamel }} !== 'undefined') {
                payload['{{ parameter.name }}'] = {{ parameter.name | caseCamel }};
            }

{% endfor %}
            const uri = new URL(this.config.endpoint + path);
{% if method.type == 'location' or method.type == 'webAuth' %}
{% if method.security|length > 0 %}
{% for node in method.security %}
{% for key,header in node|keys %}
            payload['{{header|caseLower}}'] = this.config.{{header|caseLower}};

{% endfor %}
{% endfor %}
{% endif %}

            const query = new URLSearchParams(payload);
            uri.search = query.toString();
{% endif %}
{% if method.type == 'webAuth' %}
            if (window?.location) {
                window.location.href = uri.toString();
            } else {
                return uri;
            }
{% elseif method.type == 'location' %}
            return uri;
{% else %}
            return await this.call('{{ method.method | caseLower }}', uri, new Headers(
                {
{% for parameter in method.parameters.header %}
                    '{{ parameter.name }}': this.${{ parameter.name | caseCamel }},
{% endfor %}
{% for key, header in method.headers %}
                    '{{ key }}': '{{ header }}',
{% endfor %}
                }
            ), payload);
{% endif %}
        }{% if not loop.last %},
{% endif %}
{% endfor %}

    };

{% endfor %}
};

export { {{spec.title | caseUcfirst}} }
export type { {{spec.title | caseUcfirst}}Exception }