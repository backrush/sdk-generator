import 'dart:convert';
import 'dart:html' as html;
import 'package:http/http.dart' as http;
import 'client_mixin.dart';
import 'enums.dart';
import 'exception.dart';
import 'client_base.dart';
import 'package:http/browser_client.dart';

import 'response.dart';

ClientBase createClient({
  required String endPoint,
  required bool selfSigned,
}) =>
    ClientBrowser(endPoint: endPoint, selfSigned: selfSigned);

class ClientBrowser extends ClientBase with ClientMixin {
  String _endPoint;
  Map<String, String>? _headers;
  late Map<String, String> config;
  bool _initialized = false;
  late BrowserClient httpClient;

  ClientBrowser({
    String endPoint = 'https://appwrite.io/v1',
    bool selfSigned = false,
  }) : _endPoint = endPoint {
    this.httpClient = BrowserClient();
    this._headers = {
      'content-type': 'application/json',
      'x-sdk-version': 'appwrite:flutter:0.6.4',
      'X-Appwrite-Response-Format': '0.8.0',
    };

    this.config = {};

    assert(_endPoint.startsWith(RegExp("http://|https://")),
        "endPoint $_endPoint must start with 'http'");
    init();
  }

  String get endPoint => _endPoint;

{% for header in spec.global.headers %}
{% if header.description %}
     /// {{header.description}}
{% endif %}
    ClientBrowser set{{header.key | caseUcfirst}}(value) {
        config['{{ header.key | caseCamel }}'] = value;
        addHeader('{{header.name}}', value);
        return this;
    }
{% endfor %}

  ClientBrowser setSelfSigned({bool status = true}) {
    return this;
  }

  ClientBrowser setEndpoint(String endPoint) {
    this._endPoint = endPoint;
    return this;
  }

  ClientBrowser addHeader(String key, String value) {
    _headers![key] = value;

    return this;
  }

  Future init() async {
    // if web set withCredentials true to make cookies work
    if (html.window.localStorage.keys.contains('x-fallback-cookies')) {
      addHeader(
          'x-fallback-cookies',
          html.window.localStorage.entries
              .firstWhere((i) => i.key == 'cookieFallback')
              .value);
    }
    httpClient.withCredentials = true;
    _initialized = true;
  }

  Future<Response> call(
    HttpMethod method, {
    String path = '',
    Map<String, String> headers = const {},
    Map<String, dynamic> params = const {},
    ResponseType? responseType,
  }) async {
    if (!_initialized) {
      await this.init();
    }

    late http.Response res;
    http.BaseRequest request = this.prepareRequest(
      method,
      uri: Uri.parse(_endPoint + path),
      headers: {...this._headers!, ...headers},
      params: params,
    );
    try {
      final streamedResponse = await httpClient.send(request);
      res = await http.Response.fromStream(streamedResponse);

      final cookieFallback = res.headers['x-fallback-cookies'];
      if (cookieFallback != null) {
        print(
            'Appwrite is using localStorage for session management. Increase your security by adding a custom domain as your API endpoint.');
        addHeader('X-Fallback-Cookies', cookieFallback);
        html.window.localStorage.addAll({'cookieFallback': cookieFallback});
      }
      return this.prepareResponse(res, responseType: responseType);
    } catch (e) {
      if (e is AppwriteException) {
        throw e;
      }
      throw AppwriteException(e.toString());
    }
  }

  @override
  Future webAuth(Uri url) {
    throw UnimplementedError();
  }
}
