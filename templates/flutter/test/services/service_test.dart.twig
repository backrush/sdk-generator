{% import 'flutter/base/utils.twig' as utils %}
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/mockito.dart';
import 'package:appwrite/models.dart' as models;
import 'package:appwrite/src/enums.dart';
import 'package:appwrite/src/response.dart';
import 'dart:typed_data';
import 'package:appwrite/appwrite.dart';

class MockClient extends Mock implements Client {
  Map<String, String> config = {'project': 'testproject'};

  @override
  Future<Response> call(
    HttpMethod? method, {
    String path = '',
    Map<String, String> headers = const {},
    Map<String, dynamic> params = const {},
    ResponseType? responseType,
  }) async {
    super.noSuchMethod(Invocation.method(#call, [method]));
    return super.noSuchMethod(Invocation.method(#call, [method]),
        returnValue: Response());
  }
}

void main() {
    group('{{service.name | caseUcfirst}} test', () {
        late Client client;
        late {{service.name | caseUcfirst}} {{service.name | caseCamel}};

        setUp(() {
            client = MockClient();
            {{service.name | caseCamel}} = {{service.name | caseUcfirst}}(client);
        });

{% for method in service.methods %}
        test('test method {{method.name | caseCamel}}()', () async {
            {% if method.type == 'webAuth' %}

            {%~ elseif method.type == 'location' ~%}
            final Uint8List data = Uint8List.fromList([]);
            {% else %}
            final Map<String, dynamic> data = {
                {# need response model #}
            };
            {% endif %}

            when(client.call(
                HttpMethod.{{method.method | caseLower}},
            )).thenAnswer((_) async => Response(data: data));

            final response = await {{service.name | caseCamel}}.{{method.name | caseCamel}}(
{% for parameter in method.parameters.all %}
{% if parameter.required %}
                {{parameter.name | caseCamel}}: '{{parameter.example}}',
{% endif %}
{% endfor %}    
            );

        {%~ if method.type == 'location' ~%}
            expect(response, isA<Uint8List>());
        {% endif %}

        });

{% endfor %}


    });
}