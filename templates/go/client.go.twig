package {{ spec.title | caseLower }}

import (
	"bytes"
	"crypto/tls"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"mime/multipart"
	"net/http"
	"net/http/cookiejar"
	"net/url"
	"os"
	"reflect"
	"strconv"
	"strings"
	"time"
)

const (
	fileNameKey      = "file"
	defaultTimeout   = 10 * time.Second
	defaultChunkSize = 5 * 1024 * 1024
)

// {{ spec.title | caseUcfirst }}Error represents an error of a client request
type {{ spec.title | caseUcfirst }}Error struct {
	statusCode int
	message    string
}

// ClientResponse - represents the client response
type ClientResponse struct {
	Status     string
	StatusCode int
	Header     http.Header
	Result     interface{}
}

func (ce *{{ spec.title | caseUcfirst }}Error) Error() string {
	return ce.message
}

func (ce *{{ spec.title | caseUcfirst }}Error) GetMessage() string {
	return ce.message
}

func (ce *{{ spec.title | caseUcfirst }}Error) GetStatusCode() int {
	return ce.statusCode
}

// Client is the client struct to access {{ spec.title | caseUcfirst }}  services
type Client struct {
	client     *http.Client
	headers    map[string]string
	endpoint   string
	timeout    time.Duration
	selfSigned bool
	chunkSize  int64
}

// NewClient initializes a new {{ spec.title | caseUcfirst }} client with a given timeout
func NewClient() Client {
	headers := map[string]string{
{% for key,header in spec.global.defaultHeaders %}
		"{{key}}" : "{{header}}",
		"x-sdk-name": "{{ sdk.name }}",
		"x-sdk-platform": "{{ sdk.platform }}",
		"x-sdk-language": "{{ language.name | caseLower }}",
		"x-sdk-version": "{{ sdk.version }}",
{% endfor %}
	}
	httpClient, err := getDefaultClient(defaultTimeout)
	if err != nil {
		panic(err)
	}
	return Client{
		endpoint:  "https://HOSTNAME/v1",
		client:    httpClient,
		timeout:   defaultTimeout,
		headers:   headers,
		chunkSize: defaultChunkSize,
	}
}

func (clt *Client) String() string {
	return fmt.Sprintf("%s\n%s\n%v", clt.endpoint, clt.headers, clt.timeout)
}

func getDefaultClient(timeout time.Duration) (*http.Client, error) {
	jar, err := cookiejar.New(nil)
	if err != nil {
		return nil, err
	}
	return &http.Client{
		Jar:     jar,
		Timeout: timeout,
	}, nil
}

func (clt *Client) SetTimeout(timeout time.Duration) error {
	clt.timeout = timeout
	httpClient, err := getDefaultClient(timeout)
	if err != nil {
		return err
	}
	clt.client = httpClient
	return nil
}

// SetEndpoint sets the default endpoint to which the Client connects to
func (clt *Client) SetEndpoint(endpoint string) {
	clt.endpoint = endpoint
}

// SetSelfSigned sets the condition that specify if the Client should allow connections to a server using a self-signed certificate
func (clt *Client) SetSelfSigned(status bool) {
	clt.selfSigned = status
}

// SetChunkSize sets the chunk size for file upload
func (clt *Client) SetChunkSize(size int64) {
	clt.chunkSize = size
}

// AddHeader add a new custom header that the Client should send on each request
func (clt *Client) AddHeader(key string, value string) {
	clt.headers[key] = value
}
{% for header in spec.global.headers %}

{% if header.description %}
// {{header.description}}
{% endif %}
func (clt *Client) Set{{header.key | caseUcfirst}}(value string) {
	clt.headers["{{header.name}}"] = value
}
{% endfor %}

func isFileUpload(headers map[string]interface{}) bool {
	contentType, ok := headers["content-type"].(string)
	if ok {
		return strings.Contains(strings.ToLower(contentType), "multipart/form-data")
	}
	return false
}

func (clt *Client) FileUpload(url string, headers map[string]interface{}, params map[string]interface{}, paramName string, uploadId string) (*ClientResponse, error) {
	inputFile, ok := params[paramName].(InputFile)
	if !ok {
		msg := fmt.Sprintf("invalid input file. params[%s] must be of type InputFile", paramName)
		return nil, errors.New(msg)
	}

	file, err := os.Open(inputFile.Path)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	fileInfo, err := file.Stat()
	if err != nil {
		return nil, err
	}

	inputFile.Data = make([]byte, clt.chunkSize)

	var result *ClientResponse

	numChunks := fileInfo.Size() / clt.chunkSize
	if fileInfo.Size()%clt.chunkSize != 0 {
		numChunks++
	}
	var currentChunk int64 = 0
	if uploadId != "" && uploadId != "unique()" {
		resp, err := clt.Call("GET", url+"/"+uploadId, nil, nil)
		if err == nil {
			currentChunk = int64(resp.Result.(map[string]interface{})["chunksUploaded"].(float64))
		}
	}
	for i := currentChunk; i < numChunks; i++ {
		chunkSize := clt.chunkSize
		offset := int64(i) * chunkSize
		if i == numChunks-1 {
			chunkSize = fileInfo.Size() - offset
			inputFile.Data = make([]byte, chunkSize)
		}
		_, err := file.ReadAt(inputFile.Data, offset)
		if err != nil && err != io.EOF {
			return nil, err
		}
		params[paramName] = inputFile
		if uploadId != "" {
			headers["x-appwrite-id"] = uploadId
		}
		totalSize := fileInfo.Size()
		start := offset
		end := offset + clt.chunkSize - 1
		if end > totalSize {
			end = totalSize
		}
		headers["content-range"] = fmt.Sprintf("bytes %d-%d/%d", start, end, totalSize)
		result, err = clt.Call("POST", url, headers, params)
		if err != nil {
			return nil, err
		}

		uploadId, _ = result.Result.(map[string]interface{})["$id"].(string)
	}
	return result, nil
}

// Call an API using Client
func (clt *Client) Call(method string, path string, headers map[string]interface{}, params map[string]interface{}) (*ClientResponse, error) {
	if clt.client == nil {
		// Create HTTP client
		httpClient, err := getDefaultClient(clt.timeout)
		if err != nil {
			panic(err)
		}
		clt.client = httpClient
	}

	if clt.selfSigned {
		http.DefaultTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	}

	urlPath := clt.endpoint + path
	isGet := strings.ToUpper(method) == "GET"
	isPost := strings.ToUpper(method) == "POST"
	isJsonRequest := headers["content-type"] == "application/json"
	isFileUpload := isFileUpload(headers)

	var req *http.Request
	var err error
	if isFileUpload {
		if !isPost {
			return nil, errors.New("fileupload needs POST Request")
		}
		var body bytes.Buffer
		writer := multipart.NewWriter(&body)
		if val, ok := params[fileNameKey]; ok {
			if file, ok := val.(InputFile); ok {
				fileName := file.Name
				fileData := file.Data
				fw, err := writer.CreateFormFile(fileNameKey, fileName)
				if err != nil {
					return nil, err
				}
				_, err = io.Copy(fw, bytes.NewReader(fileData))
				if err != nil {
					return nil, err
				}
				delete(params, fileNameKey)
			} else {
				return nil, errors.New("invalid input file")
			}
		}
		for key, val := range params {
			rt := reflect.TypeOf(val)
			switch rt.Kind() {
			case reflect.Array:
			case reflect.Slice:
				arr := reflect.ValueOf(val)
				for i := 0; i < arr.Len(); i++ {
					err = writer.WriteField(fmt.Sprintf("%s[]", key), toString(arr.Index(i)))
					if err != nil {
						return nil, err
					}
				}
			default:
				err = writer.WriteField(key, toString(val))
				if err != nil {
					return nil, err
				}
			}
		}
		err = writer.Close()
		if err != nil {
			return nil, err
		}
		req, err = http.NewRequest(method, urlPath, &body)
		if err != nil {
			return nil, err
		}
		headers["content-type"] = writer.FormDataContentType()
	} else {
		if !isGet {
			var reqBody *strings.Reader
			if isJsonRequest {
				json, err := json.Marshal(params)
				if err != nil {
					return nil, err
				}
				reqBody = strings.NewReader(string(json))
			} else {
				frm := url.Values{}
				for key, val := range params {
					frm.Add(key, toString(val))
				}
				reqBody = strings.NewReader(frm.Encode())
			}
			// Create and modify HTTP request before sending
			req, err = http.NewRequest(method, urlPath, reqBody)
			if err != nil {
				return nil, err
			}
		} else {
			req, err = http.NewRequest(method, urlPath, nil)
			if err != nil {
				return nil, err
			}
		}

		if isGet {
			q := req.URL.Query()
			for key, val := range params {
				rt := reflect.TypeOf(val)
				switch rt.Kind() {
				case reflect.Array:
				case reflect.Slice:
					arr := reflect.ValueOf(val)
					for i := 0; i < arr.Len(); i++ {
						q.Add(fmt.Sprintf("%s[]", key), toString(arr.Index(i)))
					}
				default:
					if strVal := toString(val); strVal != "" {
						q.Add(key, strVal)
					}
				}
			}
			rawQuery := q.Encode()
			req.URL.RawQuery = rawQuery
		}
	}

	// Set Custom headers
	for key, val := range headers {
		req.Header.Set(key, toString(val))
	}

	// Set Client headers
	for key, val := range clt.headers {
		req.Header.Set(key, toString(val))
	}

	// Make request
	resp, err := clt.client.Do(req)
	if err != nil {
		return nil, err
	}

	// Handle response
	defer resp.Body.Close()

	responseData, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	var isJson = strings.HasPrefix(resp.Header.Get("content-type"), "application/json")
	if isJson {
		var jsonResponse map[string]interface{}
		json.Unmarshal(responseData, &jsonResponse)
		if resp.StatusCode < 200 || resp.StatusCode > 399 {
			message, ok := jsonResponse["message"].(string)
			if !ok {
				message = "N/A"
			}
			return nil, &{{ spec.title | caseUcfirst }}Error{
				statusCode: resp.StatusCode,
				message:    message,
			}
		}
		return &ClientResponse{
			Status:     resp.Status,
			StatusCode: resp.StatusCode,
			Header:     resp.Header,
			Result:     jsonResponse,
		}, nil
	}
	output, err := getOutput(params, fileNameKey, responseData, resp.Header.Get("content-type"))
	if err != nil {
		return nil, err
	}
	if resp.StatusCode < 200 || resp.StatusCode > 399 {
		return nil, &{{ spec.title | caseUcfirst }}Error{
			statusCode: resp.StatusCode,
			message:    output,
		}
	}
	return &ClientResponse{
		Status:     resp.Status,
		StatusCode: resp.StatusCode,
		Header:     resp.Header,
		Result:     output,
	}, nil
}

func getOutput(params map[string]interface{}, paramName string, responseData []byte, contentType string) (string, error) {
	if strings.HasPrefix(contentType, "text") || strings.HasSuffix(contentType, "json") {
		return string(responseData), nil
	}
	path, ok := params[paramName].(string)
	if !ok {
		return "", os.ErrNotExist
	}
	file, err := os.Open(path)
	if err != nil {
		return "", err
	}

	if _, err = file.Write(responseData); err != nil {
		return "", err
	}

	if err := file.Close(); err != nil {
		return "", err
	}
	return file.Name(), nil
}

// toString changes arg to string
func toString(arg interface{}) string {
	var tmp = reflect.Indirect(reflect.ValueOf(arg)).Interface()
	switch v := tmp.(type) {
	case int:
		return strconv.Itoa(v)
	case int8:
		return strconv.FormatInt(int64(v), 10)
	case int16:
		return strconv.FormatInt(int64(v), 10)
	case int32:
		return strconv.FormatInt(int64(v), 10)
	case int64:
		return strconv.FormatInt(v, 10)
	case string:
		return v
	case float32:
		return strconv.FormatFloat(float64(v), 'f', -1, 32)
	case float64:
		return strconv.FormatFloat(v, 'f', -1, 64)
	case reflect.Value:
		return toString(v.Interface())
	case fmt.Stringer:
		return v.String()
	default:
		return fmt.Sprintf("%s", v)
	}
}
