import os
import mimetypes
from json import JSON

class Payload:
    def size(self):
        if self.data:
            return len(self.data)
        if self.path:
            return os.stat(self.path).st_size
        raise Exception('Empty payload')

    @classmethod
    def from_path(cls, path):
        instance = cls()
        instance.path = path
        instance.filename = os.path.basename(path)
        instance.mime_type = mimetypes.guess_type(path)
        return instance

    @classmethod
    def from_bytes(cls, bytes, filename, mime_type = None):
        instance = cls()
        instance.data = bytes
        instance.filename = filename
        instance.mime_type = mime_type
        return instance

    @classmethod
    def from_string(cls, string, filename, mime_type = 'text/plain'):
        instance = cls()
        instance.data = string
        instance.filename = filename
        instance.mime_type = mime_type
        return instance

    @classmethod
    def from_json(cls, json, filename, mime_type = 'application/json'):
        instance = cls()
        instance.data = JSON.stringify(json)
        instance.filename = filename
        instance.mime_type = mime_type
        return instance

    def to_string(self):
        return self.data

    def to_json(self):
        return JSON.parse(self.data)

    def to_binary(self):
        if self.data:
            return self.data
        if self.path:
            with open(self.path, 'rb') as file:
                return file.read()
        raise Exception('Empty payload')

    def __init__(self, data = None, path = None, filename = None, mime_type = None):
        self.data = data
        self.path = path

        if not filename and path:
            self.filename = os.path.basename(path)
        else:
            self.filename = filename

        if not mime_type and path:
            self.mime_type = mimetypes.guess_type(path)
        else:
            self.mime_type = mime_type
    