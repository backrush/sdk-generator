import json


# Inherit from dict to allow for easy serialization
class Query(dict):
    def __init__(self, method, attribute=None, values=None):
        self.method = method

        if attribute is not None:
            self.attribute = attribute

        if values is not None:
            self.values = values if isinstance(values, list) else [values]

    def __str__(self):
        return json.dumps(
            self.__dict__,
            separators=(",", ":"),
        )

    @staticmethod
    def equal(attribute, value):
        return Query("equal", attribute, value)

    @staticmethod
    def not_equal(attribute, value):
        return Query("notEqual", attribute, value)

    @staticmethod
    def less_than(attribute, value):
        return Query("lessThan", attribute, value)

    @staticmethod
    def less_than_equal(attribute, value):
        return Query("lessThanEqual", attribute, value)

    @staticmethod
    def greater_than(attribute, value):
        return Query("greaterThan", attribute, value)

    @staticmethod
    def greater_than_equal(attribute, value):
        return Query("greaterThanEqual", attribute, value)

    @staticmethod
    def is_null(attribute):
        return Query("isNull", attribute, None)

    @staticmethod
    def is_not_null(attribute):
        return Query("isNotNull", attribute, None)

    @staticmethod
    def between(attribute, start, end):
        return Query("between", attribute, [start, end])

    @staticmethod
    def starts_with(attribute, value):
        return Query("startsWith", attribute, value)

    @staticmethod
    def ends_with(attribute, value):
        return Query("endsWith", attribute, value)

    @staticmethod
    def select(attributes):
        return Query("select", None, attributes)

    @staticmethod
    def search(attribute, value):
        return Query("search", attribute, value)

    @staticmethod
    def order_asc(attribute):
        return Query("orderAsc", attribute, None)

    @staticmethod
    def order_desc(attribute):
        return Query("orderDesc", attribute, None)

    @staticmethod
    def cursor_before(id):
        return Query("cursorBefore", None, id)

    @staticmethod
    def cursor_after(id):
        return Query("cursorAfter", None, id)

    @staticmethod
    def limit(limit):
        return Query("limit", None, limit)

    @staticmethod
    def offset(offset):
        return Query("offset", None, offset)

    @staticmethod
    def contains(attribute, value):
        return Query("contains", attribute, value)

    @staticmethod
    def or_queries(queries):
        return Query("or", None, queries)
