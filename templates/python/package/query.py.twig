import json


class Query:
    @staticmethod
    def equal(attribute, value):
        return Query.__build_query("equal", attribute, value)

    @staticmethod
    def not_equal(attribute, value):
        return Query.__build_query("notEqual", attribute, value)

    @staticmethod
    def less_than(attribute, value):
        return Query.__build_query("lessThan", attribute, value)

    @staticmethod
    def less_than_equal(attribute, value):
        return Query.__build_query("lessThanEqual", attribute, value)

    @staticmethod
    def greater_than(attribute, value):
        return Query.__build_query("greaterThan", attribute, value)

    @staticmethod
    def greater_than_equal(attribute, value):
        return Query.__build_query("greaterThanEqual", attribute, value)

    @staticmethod
    def is_null(attribute):
        return Query.__build_query("isNull", attribute, None)

    @staticmethod
    def is_not_null(attribute):
        return Query.__build_query("isNotNull", attribute, None)

    @staticmethod
    def between(attribute, start, end):
        return Query.__build_query("between", attribute, [start, end])

    @staticmethod
    def starts_with(attribute, value):
        return Query.__build_query("startsWith", attribute, value)

    @staticmethod
    def ends_with(attribute, value):
        return Query.__build_query("endsWith", attribute, value)

    @staticmethod
    def select(attributes):
        return Query.__build_query("select", None, attributes)

    @staticmethod
    def search(attribute, value):
        return Query.__build_query("search", attribute, value)

    @staticmethod
    def order_asc(attribute):
        return Query.__build_query("orderAsc", attribute, None)

    @staticmethod
    def order_desc(attribute):
        return Query.__build_query("orderDesc", attribute, None)

    @staticmethod
    def cursor_before(id):
        return Query.__build_query("cursorBefore", None, id)

    @staticmethod
    def cursor_after(id):
        return Query.__build_query("cursorAfter", None, id)

    @staticmethod
    def limit(limit):
        return Query.__build_query("limit", None, limit)

    @staticmethod
    def offset(offset):
        return Query.__build_query("offset", None, offset)

    @staticmethod
    def __build_query(method, attribute=None, values=None):
        query = {"method": method}

        if attribute is not None:
            query["attribute"] = attribute

        if values is not None:
            query["values"] = values

        return json.dumps(query)
