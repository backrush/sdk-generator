from typing import Optional, List, Dict, Any, Union, TypeVar, Generic
{% for property in definition.properties %}
{%~ if property.sub_schema %}
from .{{ property.sub_schema | caseSnake }} import {{ property.sub_schema | caseUcfirst }}
{% endif -%}
{% endfor -%}

{% if definition.additionalProperties %}
T = TypeVar('T')
{% else -%}
{% for property in definition.properties -%}
{% if property.sub_schema -%}
T = TypeVar('T')
{% endif -%}
{% endfor -%}
{% endif %}

"""
{{ definition.description }}
"""
class {{ definition | modelType(spec) | raw }}:
    {%~ for property in definition.properties %}
    """ {{ property.description }} """
    {{ property.name | removeDollarSign }}: {{ property | propertyType(spec) | raw }}

    {%~ endfor %}
    {%~ if definition.additionalProperties %}
    data: T
    {%~ endif %}
    
    def __init__(self, {% for property in definition.properties %}{{ property.name | removeDollarSign }}: {{ property | propertyType(spec) | raw }}{% if not loop.last %}, {% endif %}{% endfor %}{% if definition.additionalProperties %}, data: T{% endif %}):
        {%~ for property in definition.properties %}
        self.{{ property.name | removeDollarSign }} = {{ property.name | removeDollarSign }}
        {%~ endfor %}
        {%~ if definition.additionalProperties %}
        self.data = data
        {%~ endif %}