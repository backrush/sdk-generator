package {{ sdk.namespace | caseDot }}

class Query {
  companion object {
    fun equal(attribute: String, value: Any): String {
      return Query.addQuery(attribute, "equal", value);
    }

    fun notEqual(attribute: String, value: Any): String {
      return Query.addQuery(attribute, "notEqual", value);
    }

    fun lesser(attribute: String, value: Any): String {
      return Query.addQuery(attribute, "lesser", value);
    }

    fun lesserEqual(attribute: String, value: Any): String {
      return Query.addQuery(attribute, "lesserEqual", value);
    }

    fun greater(attribute: String, value: Any): String {
      return Query.addQuery(attribute, "greater", value);
    }

    fun greaterEqual(attribute: String, value: Any): String {
      return Query.addQuery(attribute, "greaterEqual", value);
    }

    fun contains(attribute: String, value: List<Any>): String {
      return Query.addQuery(attribute, "contains", value);
    }

    private fun addQuery(attribute: String, oper: String, value: Any): String {
          if (value is List<*>) {
           	return "${attribute}.${oper}(${value.map{it->parseValues(it!!)}.joinToString(",")})";
          }
    	return "${attribute}.${oper}(${Query.parseValues(value)})";
    }
    private fun parseValues(value: Any): String {
        if (value is String) {
        	return "\"${value}\"";
      	}
    	return "${value}";
    }
  }
}