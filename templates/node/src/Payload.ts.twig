import { readFileSync } from "fs";
import { File } from "node-fetch-native-with-agent";
import { basename } from "path";

export class Payload extends File {
  private data: Buffer;
  private fileName: string;

  constructor(data: Buffer, name?: string) {
    super([data], name || 'unnamed');
    this.data = data;
    this.fileName = name || 'unnamed';
  }

  public getData(): Buffer {
    return this.data;
  }

  public toBinary(): Buffer {
    return this.data;
  }

  public toJson(): any {
    return JSON.parse(this.data.toString("utf-8"));
  }

  public toString(): string {
    return this.data.toString("utf-8");
  }

  public toFile(): File {
    return new File([this.data], this.fileName);
  }

  public static fromBinary(bytes: Buffer, name?: string): Payload {
    return new Payload(bytes, name);
  }

  public static fromJson(object: any, name?: string): Payload {
    const data = Buffer.from(JSON.stringify(object), "utf-8");
    return new Payload(data, name);
  }

  public static fromString(text: string, name?: string): Payload {
    const data = Buffer.from(text, "utf-8");
    return new Payload(data, name);
  }

  public static fromFile(filePath: string, name?: string): Payload {
    const data = readFileSync(filePath);
    const fileName = name || basename(filePath);
    return new Payload(data, fileName);
  }
}