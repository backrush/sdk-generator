const Service = require('../service.js');
const {{spec.title | caseUcfirst}}Exception = require('../exception.js');

class {{ service.name | caseUcfirst }} extends Service {
{% for method in service.methods %}

    /**
     * {{ method.title }}
     *
{% if method.description %}
{{ method.description|comment1 }}
     *
{% endif %}
{% for parameter in method.parameters.all %}
     * @param {{ parameter.type | typeName }} {{ parameter.name | caseCamel }}
{% endfor %}
     * @throws Exception
     * @return {}
     */
    async {{ method.name | caseCamel }}({% for parameter in method.parameters.all %}{{ parameter.name | caseCamel }}{% if not loop.last %}, {% endif %}{% endfor %}) {
        let path = '{{ method.path }}'{% for parameter in method.parameters.path %}.replace('{{ '{' }}{{ parameter.name | caseCamel }}{{ '}' }}', {{ parameter.name | caseCamel }}){% endfor %};
        let payload = {};
{% for parameter in method.parameters.all %}

        if ({{ parameter.name | caseCamel }} !== undefined) {
            payload['{{ parameter.name }}'] = {{ parameter.name | caseCamel }};
        }{% if parameter.required %} else {
            throw new {{spec.title | caseUcfirst}}Exception('Missing required parameter: "{{ parameter.name | caseCamel }}"');
        }{% endif %}

{% endfor %}

        return await this.client.call('{{ method.method | caseLower }}', path, {
{% for parameter in method.parameters.header %}
            '{{ parameter.name }}': ${{ parameter.name | caseCamel }},
{% endfor %}
{% for key, header in method.headers %}
            '{{ key }}': '{{ header }}',
{% endfor %}
        }, payload{% if method.type == 'location' %}, 'arraybuffer'{% endif %});
    }
{% endfor %}
}

module.exports = {{ service.name | caseUcfirst }};