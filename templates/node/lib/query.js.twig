function buildQuery(method, attributes, values) {
  const query = {
    method,
  };

  if (attributes) {
    query["attribute"] = attributes;
  }

  if (values) {
    query["values"] = values;
  }

  return JSON.stringify(query);
}

export class Query {
  static equal = (attribute, value) => buildQuery("equal", attribute, value);

  static notEqual = (attribute, value) =>
    buildQuery("notEqual", attribute, value);

  static lessThan = (attribute, value) =>
    buildQuery("lessThan", attribute, value);

  static lessThanEqual = (attribute, value) =>
    buildQuery("lessThanEqual", attribute, value);

  static greaterThan = (attribute, value) =>
    buildQuery("greaterThan", attribute, value);

  static greaterThanEqual = (attribute, value) =>
    buildQuery("greaterThanEqual", attribute, value);

  static isNull = (attribute) => buildQuery("isNull", attribute);

  static isNotNull = (attribute) => buildQuery("isNotNull", attribute);

  static between = (attribute, start, end) =>
    buildQuery("between", attribute, [start, end]);

  static startsWith = (attribute, value) =>
    buildQuery("startsWith", attribute, value);

  static endsWith = (attribute, value) =>
    buildQuery("endsWith", attribute, value);

  static select = (attributes) => buildQuery("select", attributes);

  static search = (attribute, value) => buildQuery("search", attribute, value);

  static orderDesc = (attribute) => buildQuery("orderDesc", attribute);

  static orderAsc = (attribute) => buildQuery("orderAsc", attribute);

  static cursorAfter = (documentId) => buildQuery("cursorAfter", documentId);

  static cursorBefore = (documentId) => buildQuery("cursorBefore", documentId);

  static limit = (limit) => buildQuery("limit", undefined, limit);

  static offset = (offset) => buildQuery("offset", undefined, offset);
}
