const os = require('os');
const URL = require('url').URL;
const {fetch, FormData} = require('undici');
const {{spec.title | caseUcfirst}}Exception = require('./exception.js');

class Client {
    static CHUNK_SIZE = 5*1024*1024; // 5MB
    
    constructor() {
        this.endpoint = '{{spec.endpoint}}';
        this.headers = {
            'accept-encoding': '*',
            'content-type': '',
            'user-agent' : `{{spec.title | caseUcfirst}}{{language.name | caseUcfirst}}SDK/{{ sdk.version }} (${os.type()}; ${os.version()}; ${os.arch()})`,
            'x-sdk-name': '{{ sdk.name }}',
            'x-sdk-platform': '{{ sdk.platform }}',
            'x-sdk-language': '{{ language.name | caseLower }}',
            'x-sdk-version': '{{ sdk.version }}',
{% for key,header in spec.global.defaultHeaders %}
            '{{key}}' : '{{header}}',
{% endfor %}
        };
        this.selfSigned = false;
    }

{% for header in spec.global.headers %}
    /**
     * Set {{header.key | caseUcfirst}}
     *
{% if header.description %}
     * {{header.description}}
     *
{% endif %}
     * @param {string} {{header.key | caseLower}}
     *
     * @return self
     */
    set{{header.key | caseUcfirst}}({{header.key | caseLower}}) {
        this.addHeader('{{header.name}}', {{header.key | caseLower}});

        return this;
    }

{% endfor %}
    /**
     * Set self signed.
     *
     * @param {bool} status
     *
     * @return this
     */
    setSelfSigned(status = true) {
        this.selfSigned = status;

        return this;
    }

    /**
     * Set endpoint.
     *
     * @param {string} endpoint
     *
     * @return this
     */
    setEndpoint(endpoint)
    {
        this.endpoint = endpoint;

        return this;
    }

    /**
     * Sets a header for requests.
     * 
     * @param {string} key
     * @param {string} value
     * 
     * @return this
     */
    addHeader(key, value) {
        this.headers[key.toLowerCase()] = value;
        
        return this;
    }
      
    async call(method, path = '', headers = {}, params = {}, responseType = 'json') {
        if(this.selfSigned) { // Allow self signed requests
            process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;
        }


        headers = Object.assign({}, this.headers, headers);

        let contentType = headers['content-type'].toLowerCase();

        let formData = null;

        // Compute FormData
        if (contentType.startsWith('multipart/form-data')) {
            const form = new FormData();
            
            let flatParams = Client.flatten(params);
            
            for (const key in flatParams) {
                const value = flatParams[key];

                if(value && value.type && value.type === 'file') {
                    form.append(key, value.file, { filename: value.filename });
                } else {
                    form.append(key, flatParams[key]);
                }
            }

            headers = {
                ...headers,
                ...form.getHeaders()
            };

            formData = form;
        }

        const url = new URL(path, this.endpoint).toString();
        const isGetMethod = method.toUpperCase() === "GET";
        const isJson = contentType.startsWith("application/json");
        const isMultipart = contentType.startsWith("multipart/form-data");
    
        let body = null;
        if (!isGetMethod && !isMultipart) {
          body = isJson ? JSON.stringify(params) : params;
        } else if (!isGetMethod && isMultipart) {
          body = formData;
        }
    
        try {
          const response = await fetch(url, {
            method: method.toUpperCase(),
            headers: headers,
            body: body,
          });
    
          let data;
          if (responseType === "json") {
            data = await response.json();
          } else {
            data = await response.text();
          }
    
          return data;
        } catch (error) {
          if (error.response) {
            const errorData = await error.response.json();
            throw new {{spec.title | caseUcfirst}}Exception(
              errorData.message,
              error.response.status,
              errorData.type,
              errorData
            );
          } else {
            throw new {{spec.title | caseUcfirst}}Exception(error.message);
          }
        }
    }

    static flatten(data, prefix = '') {
        let output = {};

        for (const key in data) {
            let value = data[key];
            let finalKey = prefix ? prefix + '[' + key +']' : key;

            if (Array.isArray(value)) {
                output = Object.assign(output, Client.flatten(value, finalKey)); // @todo: handle name collision here if needed
            } else {
                output[finalKey] = value;
            }
        }

        return output;
    }
}

module.exports = Client;
