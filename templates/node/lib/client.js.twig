const os = require('os');
const URL = require('url').URL;
const {fetch, FormData, Agent} = require('undici');
const {{spec.title | caseUcfirst}}Exception = require('./exception.js');

class Client {
    static CHUNK_SIZE = 5*1024*1024; // 5MB
    
    constructor() {
        this.endpoint = '{{spec.endpoint}}';
        this.headers = {
            'accept-encoding': '*',
            'content-type': '',
            'user-agent' : `{{spec.title | caseUcfirst}}{{language.name | caseUcfirst}}SDK/{{ sdk.version }} (${os.type()}; ${os.version()}; ${os.arch()})`,
            'x-sdk-name': '{{ sdk.name }}',
            'x-sdk-platform': '{{ sdk.platform }}',
            'x-sdk-language': '{{ language.name | caseLower }}',
            'x-sdk-version': '{{ sdk.version }}',
            {%~ for key,header in spec.global.defaultHeaders %}
            '{{key}}' : '{{header}}',
            {%~ endfor %}
        };
        this.selfSigned = false;
    }

    {%~ for header in spec.global.headers %}
    /**
     * Set {{header.key | caseUcfirst}}
     *
    {%~ if header.description %}
     * {{header.description}}
     *
    {%~ endif %}
     * @param {string} {{header.key | caseLower}}
     *
     * @return Client
     */
    set{{header.key | caseUcfirst}}({{header.key | caseLower}}) {
        this.addHeader('{{header.name}}', {{header.key | caseLower}});

        return this;
    }

    {%~ endfor %}
    /**
     * Set self signed.
     *
     * @param {bool} status
     *
     * @return this
     */
    setSelfSigned(status = true) {
        this.selfSigned = status;

        return this;
    }

    /**
     * Set endpoint.
     *
     * @param {string} endpoint
     *
     * @return this
     */
    setEndpoint(endpoint)
    {
        this.endpoint = endpoint;

        return this;
    }

    /**
     * Sets a header for requests.
     * 
     * @param {string} key
     * @param {string} value
     * 
     * @return this
     */
    addHeader(key, value) {
        this.headers[key.toLowerCase()] = value;
        
        return this;
    }
      
    async call(method, path = "", headers = {}, params = {}) {
        headers = {...this.headers, ...headers};
        const url = new URL(this.endpoint + path);

        let body = undefined;

        if (method.toUpperCase() === "GET") {
            url.search = new URLSearchParams(Client.flatten(params)).toString();
        } else if (headers["content-type"]?.toLowerCase().startsWith("multipart/form-data")) {
            delete headers["content-type"];
            const formData = new FormData();

            const flatParams = Client.flatten(params);

            for (const [key, value] of Object.entries(flatParams)) {
                if (value && value.type && value.type === "file") {
                    formData.append(key, value.file, value.filename);
                } else {
                    formData.append(key, value);
                }
            }

            body = formData;
        } else {
            body = JSON.stringify(params);
        }

        try {
            const response = await fetch(url.toString(), {
                method: method.toUpperCase(),
                headers,
                body,
                dispatcher: new Agent({
                    connect: {
                        rejectUnauthorized: !this.selfSigned,
                    },
                }),
            });

            if (response.headers.get("content-type") === "application/json") {
                const json = await response.json();
                if (response.status >= 400) throw new {{spec.title | caseUcfirst}}Exception(json.message, json.code, json.type, json);
                return json;
            } else {
                const text = await response.text();
                if (response.status >= 400) throw new {{spec.title | caseUcfirst}}Exception(text, response.status, "", text);
                return text;
            }
        } catch (error) {
            if (!(error instanceof {{spec.title | caseUcfirst}}Exception)) throw new {{spec.title | caseUcfirst}}Exception(error.message);
            throw error;
        }
    }

    static flatten(data, prefix = '') {
        let output = {};

        for (const key in data) {
            let value = data[key];
            let finalKey = prefix ? prefix + '[' + key +']' : key;

            if (Array.isArray(value)) {
                output = Object.assign(output, Client.flatten(value, finalKey)); // @todo: handle name collision here if needed
            } else {
                output[finalKey] = value;
            }
        }

        return output;
    }
}

module.exports = Client;
