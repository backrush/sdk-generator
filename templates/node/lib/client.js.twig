const os = require('os');
const URL = require('url').URL;
const {fetch, FormData, Agent} = require('undici');
const {{spec.title | caseUcfirst}}Exception = require('./exception.js');

class Client {
    static CHUNK_SIZE = 5*1024*1024; // 5MB
    
    constructor() {
        this.endpoint = '{{spec.endpoint}}';
        this.headers = {
            'accept-encoding': '*',
            'content-type': '',
            'user-agent' : `{{spec.title | caseUcfirst}}{{language.name | caseUcfirst}}SDK/{{ sdk.version }} (${os.type()}; ${os.version()}; ${os.arch()})`,
            'x-sdk-name': '{{ sdk.name }}',
            'x-sdk-platform': '{{ sdk.platform }}',
            'x-sdk-language': '{{ language.name | caseLower }}',
            'x-sdk-version': '{{ sdk.version }}',
{% for key,header in spec.global.defaultHeaders %}
            '{{key}}' : '{{header}}',
{% endfor %}
        };
        this.selfSigned = false;
    }

{% for header in spec.global.headers %}
    /**
     * Set {{header.key | caseUcfirst}}
     *
{% if header.description %}
     * {{header.description}}
     *
{% endif %}
     * @param {string} {{header.key | caseLower}}
     *
     * @return self
     */
    set{{header.key | caseUcfirst}}({{header.key | caseLower}}) {
        this.addHeader('{{header.name}}', {{header.key | caseLower}});

        return this;
    }

{% endfor %}
    /**
     * Set self signed.
     *
     * @param {bool} status
     *
     * @return this
     */
    setSelfSigned(status = true) {
        this.selfSigned = status;

        return this;
    }

    /**
     * Set endpoint.
     *
     * @param {string} endpoint
     *
     * @return this
     */
    setEndpoint(endpoint)
    {
        this.endpoint = endpoint;

        return this;
    }

    /**
     * Sets a header for requests.
     * 
     * @param {string} key
     * @param {string} value
     * 
     * @return this
     */
    addHeader(key, value) {
        this.headers[key.toLowerCase()] = value;
        
        return this;
    }
      
    async call(method, path = "", headers = {}, params = {}) {
        const url = new URL(path, this.endpoint);

        let body = undefined;

        if (method.toUpperCase() === "GET") {
            url.search = new URLSearchParams(this.flatten(params)).toString();
        } else if (headers["content-type"]?.toLowerCase().startsWith("multipart/form-data")) {
            delete headers["content-type"];
            const formData = new FormData();

            const flatParams = this.flatten(params);

            for (const [key, value] of flatParams.entries()) {
                if (value && value.type && value.type === "file") {
                    formData.append(key, value.file, value.filename);
                } else {
                    formData.append(key, value);
                }
            }

            body = formData;
        } else {
            body = JSON.stringify(params);
        }

        try {
            const response = await fetch(url.toString(), {
                method,
                headers,
                body,
                dispatcher: new Agent({
                    connect: {
                        rejectUnauthorized: !this.selfSigned,
                    },
                })
            });
            const contentType = response.headers.get("content-type");

            if (contentType && contentType.includes("application/json")) {
                if (response.status >= 400) {
                    const json = await response.json();
                    throw new {{ spec.title | caseUcfirst}}Exception(
                        json.message,
                        json.status,
                        json.type ?? "",
                        json
                    );
                }

                return response.json();
            } else {
                if (response.status >= 400) {
                    const text = await response.text();
                    throw new {{ spec.title | caseUcfirst}}Exception(text, response.status, "", null);
                }
                return response;
            }
        } catch (error) {
            throw new {{ spec.title | caseUcfirst}}Exception(
                error?.response?.message || error.message,
                error?.response?.code,
                error?.response?.type,
                error.response
            );
        }
    }

    static flatten(data, prefix = '') {
        let output = {};

        for (const key in data) {
            let value = data[key];
            let finalKey = prefix ? prefix + '[' + key +']' : key;

            if (Array.isArray(value)) {
                output = Object.assign(output, Client.flatten(value, finalKey)); // @todo: handle name collision here if needed
            } else {
                output[finalKey] = value;
            }
        }

        return output;
    }
}

module.exports = Client;
