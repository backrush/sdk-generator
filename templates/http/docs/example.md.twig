{{ method.method | caseUpper }} {{method.fullPath}} HTTP/1.1
host: {hostname_or_ip}
{% for key, header in method.headers %}
{{ key }}: {{ header }}
{% endfor %}
accept-encoding: gzip, deflate

{% for parameter in method.parameters.query %}{% if parameter.required %}{% if not loop.first %}&{% endif %}{{parameter.name}}={{ parameter | paramExample }}{% endif %}{% endfor %}
{% for parameter in method.parameters.body %}{% if parameter.required %}{% if not loop.first %}&{% endif %}{{parameter.name}}={{ parameter | paramExample }}{% endif %}{% endfor %}





{{method|caseJson}}

let sdk = new {{ spec.title | caseUcfirst }}();

{% if method.security|length > 0 %}
sdk
    .setEndpoint('https://[HOSTNAME_OR_IP]/v1') // Your API Endpoint
{% for node in method.security %}
{% for key,header in node|keys %}
    .set{{header}}('{{node[header]['x-appwrite']['demo']}}') // {{node[header].description}}
{% endfor %}
{% endfor %};

{% endif %}
let {% if method.type == 'location' %}result{% else %}promise{% endif %} = sdk.{{ service.name | caseLower }}.{{ method.name | caseCamel }}({% for parameter in method.parameters.all %}{% if parameter.required %}{% if not loop.first %}, {% endif %}{{ parameter | paramExample }}{% endif %}{% endfor %});

{% if method.type == 'location' %}
console.log(result); // Resource URL
{% else %}
promise.then(function (response) {
    console.log(response); // Success
}, function (error) {
    console.log(error); // Failure
});{% endif %}