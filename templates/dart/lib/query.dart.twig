part of {{ language.params.packageName }};


/// Helper class to generate query strings.
class Query {
  final String method;
  final String? attribute;
  final dynamic values;

  Query._(this.method, [this.attribute = null, this.values = null]);

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{
      'method': method,
    };

    if(attribute != null) {
      map['attribute'] = attribute;
    }
    
    if(values != null) {
      map['values'] = values is List ? values : [values];
    }

    return map;
  }

  @override
  String toString() => jsonEncode(toJson());

  /// Filter resources where [attribute] is equal to [value].
  /// 
  /// [value] can be a single value or a list. If a list is used
  /// the query will return resources where [attribute] is equal
  /// to any of the values in the list.
  static Query equal(String attribute, dynamic value) =>
      Query._('equal', attribute, value);

  /// Filter resources where [attribute] is not equal to [value].
  static Query notEqual(String attribute, dynamic value) =>
      Query._('notEqual', attribute, [value]);

  /// Filter resources where [attribute] is less than [value].
  static Query lessThan(String attribute, dynamic value) =>
      Query._('lessThan', attribute, value);

  /// Filter resources where [attribute] is less than or equal to [value].
  static Query lessThanEqual(String attribute, dynamic value) =>
      Query._('lessThanEqual', attribute, value);

  /// Filter resources where [attribute] is greater than [value].
  static Query greaterThan(String attribute, dynamic value) =>
      Query._('greaterThan', attribute, value);

  /// Filter resources where [attribute] is greater than or equal to [value].
  static Query greaterThanEqual(String attribute, dynamic value) =>
      Query._('greaterThanEqual', attribute, value);

  /// Filter resources where by searching [attribute] for [value].
  static Query search(String attribute, String value) =>
      Query._('search', attribute, value);

  /// Filter resources where [attribute] is null.
  static Query isNull(String attribute) => Query._('isNull', attribute);

  /// Filter resources where [attribute] is not null.
  static Query isNotNull(String attribute) => Query._('isNotNull', attribute);

  /// Filter resources where [attribute] is between [start] and [end] (inclusive).
  static Query between(String attribute, dynamic start, dynamic end) =>
      Query._('between', attribute, [start, end]);

  /// Filter resources where [attribute] starts with [value].
  static Query startsWith(String attribute, String value) =>
      Query._('startsWith', attribute, value);

  /// Filter resources where [attribute] ends with [value].
  static Query endsWith(String attribute, String value) =>
      Query._('endsWith', attribute, value);

  /// Filter resouorces where [attribute] contains [value]
  /// [value] can be a single value or a list.
  static Query contains(String attribute, dynamic value) => 
      Query._('contains', attribute, value);

  static Query or(List<Query> queries) => Query._('or', null, queries);

  /// Specify which attributes should be returned by the API call.
  static Query select(List<String> attributes) =>
      Query._('select', null, attributes);

  /// Sort results by [attribute] ascending.
  static Query orderAsc(String attribute) => Query._('orderAsc', attribute);

  /// Sort results by [attribute] descending.
  static Query orderDesc(String attribute) => Query._('orderDesc', attribute);

  /// Return results before [id].
  /// 
  /// Refer to the [Cursor Based Pagination]({{sdk.url}}/docs/pagination#cursor-pagination)
  /// docs for more information.
  static Query cursorBefore(String id) => Query._('cursorBefore', null, id);

  /// Return results after [id].
  /// 
  /// Refer to the [Cursor Based Pagination]({{sdk.url}}/docs/pagination#cursor-pagination)
  /// docs for more information.
  static Query cursorAfter(String id) => Query._('cursorAfter', null, id);

  /// Return only [limit] results.
  static Query limit(int limit) => Query._('limit', null, limit);

  /// Return results from [offset].
  /// 
  /// Refer to the [Offset Pagination]({{sdk.url}}/docs/pagination#offset-pagination)
  /// docs for more information.
  static Query offset(int offset) => Query._('offset', null, offset);

}