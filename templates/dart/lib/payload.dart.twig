library {{ language.params.packageName }}.payload;

import 'dart:convert';
import 'dart:io';

class Payload {
  late final String? path;
  late final List<int>? data;
  final String? fileame;
  final String? contentType;

  Payload._({this.path, this.filename, this.contentType, this.data}) {
    if (path == null && bytes == null) {
      throw AppwriteException('One of `path` or `bytes` is required');
    }
  }

  // Get filename
  String? getFilename() {
    return filename;
  }

  // Convert to binary, with optional offset and length
  List<int> toBinary({int offset = 0, int? length}) {
    if(offset == 0 && length == null) {
      return data;
    } else if (length == null) {
      return data.sublist(offset);
    } else {
      return data.sublist(offset, offset + length);
    }
  }

  // Convert binary data to string (utf8)
  @override
  String toString() {
    return utf8.decode(data);
  }

  // Write Payload to a file
  Future<File> toFile(String path) async {
    final file = File(path);
    return await file.writeAsBytes(data);
  }

  Map<String, dynamic> toJson() {
    try {
      return jsonDecode(toString()); // Decode the string to JSON
    } catch (e) {
      throw FormatException('Failed to parse JSON: ${e.toString()}');
    }
  }

  // Create a Payload from binary data
  factory Payload.fromBinary({
    required List<int> data,
    required String filename,
  }) {
    return Payload._(data: data, filename: filename);
  }

  // Create a Payload from a file
  factory Payload.fromFile({required String path, String? filename, String? contentType}) {
    return Payload._(path: path, filename: filename, contentType: contentType);
  }

  // Create a Payload from a JSON object
  factory Payload.fromJson({
    required Map<String, dynamic> data,
    String? filename,
  }) {
    final jsonString = jsonEncode(data);
    return Payload.fromString(jsonString, filename: filename);
  }

  // Create a Payload from a string
  factory Payload.fromString(String string, {String? filename, String? contentType}) {
    final data = utf8.encode(string);
    return Payload._(data: data, filename: filename, contentType: contentType);
  }
}
