import 'dart:convert';
import 'dart:io';

class Payload {
  final List<int> _data;
  final String? fileName;
  final int size;

  // Constructor to initialize with binary data
  Payload(this._data, {this.fileName}) : size = _data.length;

  // Get binary data
  List<int> getData() {
    return _data;
  }

  // Get filename
  String? getFileName() {
    return fileName;
  }

  // Convert to binary, with optional offset and length
  List<int> toBinary({int offset = 0, int? length}) {
    if (length == null) {
      return _data.sublist(offset);
    } else {
      return _data.sublist(offset, offset + length);
    }
  }

  // Convert binary data to string (utf8)
  @override
  String toString() {
    return utf8.decode(_data);
  }

  // Write Payload to a file
  Future<File> toFile(String path) async {
    final file = File(path);
    return await file.writeAsBytes(_data);
  }

  Map<String, dynamic> toJson() {
    try {
      return jsonDecode(toString()); // Decode the string to JSON
    } catch (e) {
      throw FormatException('Failed to parse JSON: ${e.toString()}');
    }
  }

  // Create a Payload from binary data
  factory Payload.fromBinary({
    required List<int> data,
    String? fileName,
  }) {
    return Payload(data, fileName: fileName);
  }

  // Create a Payload from a file
  static Future<Payload> fromFile(String filePath, {String? fileName}) async {
    final file = File(filePath);
    final bytes = await file.readAsBytes();
    return Payload(bytes, fileName: fileName ?? file.path);
  }

  // Create a Payload from a JSON object
  factory Payload.fromJson({
    required Map<String, dynamic> data,
    String? fileName,
  }) {
    final jsonString = jsonEncode(data);
    return Payload.fromString(jsonString, fileName: fileName);
  }

  // Create a Payload from a string
  factory Payload.fromString(String string, {String? fileName}) {
    final data = utf8.encode(string);
    return Payload(data, fileName: fileName);
  }
}
