<?php
namespace {{ spec.title | caseUcfirst }};

class Payload {
    private ?string $data;
    private ?string $mimeType;
    private ?string $filename;
    private ?string $path;

    public function __construct(){}

    public function getData(): ?string
    {
        return $this->data;
    }

    public function getPath(): ?string
    {
        return $this->path;
    }

    public function getMimeType(): ?string
    {
        return $this->mimeType;
    }

    public function getFilename(): ?string
    {
        return $this->filename;
    }

    public static function fromPath(string $path, ?string $mimeType = null, ?string $filename = null)
    {
        $instance = new Payload();
        $instance->path = $path;
        $instance->data = null;
        $instance->mimeType = $mimeType;
        $instance->filename = $filename;
        return $instance;
    }

    public static function fromData(string $data, ?string $mimeType = null, ?string $filename = null)
    {
        $instance = new Payload();
        $instance->path = null;
        $instance->data = $data;
        $instance->mimeType = $mimeType;
        $instance->filename = $filename;
        return $instance;
    }

    public static function fromJson(array $data) {
        $instance = new Payload();
        $instance->path = null;
        $instance->data = json_encode($data);
        return $instance;
    }

    public static function fromString(string $data) {
        $instance = new Payload();
        $instance->path = null;
        $instance->data = $data;
        return $instance;
    }

    public function toBinary(): string
    {
        return $this->data;
    }

    public function toJson(): mixed
    {
        return json_decode($this->data, true);
    }

    public function toString(): string
    {
        return $this->data;
    }

    public static function handleFormData(string $boundary, mixed $responseBody)
    {
        $parts = explode($boundary, $responseBody);
        $data = [];
        foreach ($parts as $part) {
            $lines = array_values(array_filter(explode("\r\n", $part)));
            $matches = [];
            $matched = preg_match('/name="?(?<name>\w+)/s', $part, $matches);
            if ($matched) {
                $data[$matches['name']] = $lines[1] ?? '';;
            }
        }

        $data['responseBody'] = self::fromString($data['responseBody'] ?? '');

        return $data;
    }
}
