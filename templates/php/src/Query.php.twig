<?php

namespace {{ spec.title | caseUcfirst }};

class Query
{
    private static function buildQuery(string $method, ?mixed $attibute, ?mixed $values): string
    {
        $query = [
            'method' => $method,
        ];

        if ($attibute) {
            $query['attribute'] = $attibute;
        }

        if ($values) {
            $query['values'] = $values;
        }

        return json_encode($query);
    }

    /**
     * Equal
     *
     * @param string $attribute
     * @param mixed $value
     * @return string
     */
    public static function equal(string $attribute, $value): string
    {
        return Query::buildQuery('equal', $attribute, $value);
    }

    /**
     * Not Equal
     *
     * @param string $attribute
     * @param mixed $value
     * @return string
     */
    public static function notEqual(string $attribute, $value): string
    {
        return Query::buildQuery('notEqual', $attribute, $value);
    }

    /**
     * Less Than
     *
     * @param string $attribute
     * @param mixed $value
     * @return string
     */
    public static function lessThan(string $attribute, $value): string
    {
        return Query::buildQuery('lessThan', $attribute, $value);
    }

    /**
     * Less Than or Equal
     *
     * @param string $attribute
     * @param mixed $value
     * @return string
     */
    public static function lessThanEqual(string $attribute, $value): string
    {
        return Query::buildQuery('lessThanEqual', $attribute, $value);
    }

    /**
     * Greater Than
     *
     * @param string $attribute
     * @param mixed $value
     * @return string
     */
    public static function greaterThan(string $attribute, $value): string
    {
        return Query::buildQuery('greaterThan', $attribute, $value);
    }

    /**
     * Greater Than or Equal
     *
     * @param string $attribute
     * @param mixed $value
     * @return string
     */
    public static function greaterThanEqual(string $attribute, $value): string
    {
        return Query::buildQuery('greaterThanEqual', $attribute, $value);
    }

    /**
     * Search
     *
     * @param string $attribute
     * @param string $value
     * @return string
     */
    public static function search(string $attribute, string $value): string
    {
        return Query::buildQuery('search', $attribute, $value);
    }

    /**
     * Is Null
     *
     * @param string $attribute
     * @return string
     */
    public static function isNull(string $attribute): string
    {
        return Query::buildQuery('isNull', $attribute, null);
    }

    /**
     * Is Not Null
     *
     * @param string $attribute
     * @return string
     */
    public static function isNotNull(string $attribute): string
    {
        return Query::buildQuery('isNotNull', $attribute, null);
    }

    /**
     * Between
     *
     * @param string $attribute
     * @param string|int|float $start
     * @param string|int|float $end
     * @return string
     */
    public static function between(string $attribute, $start, $end): string
    {
        return Query::buildQuery('between', $attribute, [$start, $end]);
    }

    /**
     * Starts With
     *
     * @param string $attribute
     * @param string $value
     * @return string
     */
    public static function startsWith(string $attribute, string $value): string
    {
        return Query::buildQuery('startsWith', $attribute, $value);
    }

    /**
     * Ends With
     *
     * @param string $attribute
     * @param string $value
     * @return string
     */
    public static function endsWith(string $attribute, string $value): string
    {
        return Query::buildQuery('endsWith', $attribute, $value);
    }

    /**
     * Select
     *
     * @param array<string> $attributes
     * @return string
     */
    public static function select(array $attributes): string
    {
        return Query::buildQuery('select', null, $attributes);
    }

    /**
     * Cursor After
     *
     * @param string $documentId
     * @return string
     */
    public static function cursorAfter(string $documentId): string 
    {
        return Query::buildQuery('cursorAfter', null, $documentId);
    }

    /**
     * Cursor Before
     *
     * @param string $documentId
     * @return string
     */
    public static function cursorBefore(string $documentId): string 
    {
        return Query::buildQuery('cursorBefore', null, $documentId);
    }

    /**
     * Order Asc
     *
     * @param string $attribute
     * @return string
     */
    public static function orderAsc(string $attribute): string 
    {
        return Query::buildQuery('orderAsc', $attribute, null);
    }

    /**
     * Order Desc
     *
     * @param string $attribute
     * @return string
     */
    public static function orderDesc(string $attribute): string 
    {
        return Query::buildQuery('orderDesc', $attribute, null);
    }

    /**
     * Limit
     *
     * @param int $limit
     * @return string
     */
    public static function limit(int $limit): string 
    {
        return Query::buildQuery('limit', null, $limit);
    }

    /**
     * Offset
     *
     * @param int $offset
     * @return string
     */
    public static function offset(int $offset): string 
    {
        return Query::buildQuery('offset', null, $offset);
    }
}
