<?php

namespace {{ spec.title | caseUcfirst }};

class Query implements \JsonSerializable
{
    protected string $method;
    protected ?string $attribute;
    protected ?array $values;

    public function __construct(string $method, ?string $attribute = null, $values = null)
    {
        $this->method = $method;
        $this->attribute = $attribute;
        
        if (is_null($values) || is_array($values)) {
            $this->values = $values;
        } else {
            $this->values = [$values];
        }

    }

    public function __toString(): string
    {
        return json_encode($this->jsonSerialize());
    }

    public function jsonSerialize()
    {
        return array_filter([
            'method' => $this->method,
            'attribute' => $this->attribute,
            'values' => $this->values,
        ], function ($value) {
            return !is_null($value);
        });
    }

    /**
     * Equal
     *
     * @param string $attribute
     * @param mixed $value
     * @return Query
     */
    public static function equal(string $attribute, $value): Query
    {
        return new Query('equal', $attribute, $value);
    }

    /**
     * Not Equal
     *
     * @param string $attribute
     * @param mixed $value
     * @return Query
     */
    public static function notEqual(string $attribute, $value): Query
    {
        return new Query('notEqual', $attribute, $value);
    }

    /**
     * Less Than
     *
     * @param string $attribute
     * @param mixed $value
     * @return Query
     */
    public static function lessThan(string $attribute, $value): Query
    {
        return new Query('lessThan', $attribute, $value);
    }

    /**
     * Less Than or Equal
     *
     * @param string $attribute
     * @param mixed $value
     * @return Query
     */
    public static function lessThanEqual(string $attribute, $value): Query
    {
        return new Query('lessThanEqual', $attribute, $value);
    }

    /**
     * Greater Than
     *
     * @param string $attribute
     * @param mixed $value
     * @return Query
     */
    public static function greaterThan(string $attribute, $value): Query
    {
        return new Query('greaterThan', $attribute, $value);
    }

    /**
     * Greater Than or Equal
     *
     * @param string $attribute
     * @param mixed $value
     * @return Query
     */
    public static function greaterThanEqual(string $attribute, $value): Query
    {
        return new Query('greaterThanEqual', $attribute, $value);
    }

    /**
     * Search
     *
     * @param string $attribute
     * @param string $value
     * @return Query
     */
    public static function search(string $attribute, string $value): Query
    {
        return new Query('search', $attribute, $value);
    }

    /**
     * Is Null
     *
     * @param string $attribute
     * @return Query
     */
    public static function isNull(string $attribute): Query
    {
        return new Query('isNull', $attribute, null);
    }

    /**
     * Is Not Null
     *
     * @param string $attribute
     * @return Query
     */
    public static function isNotNull(string $attribute): Query
    {
        return new Query('isNotNull', $attribute, null);
    }

    /**
     * Between
     *
     * @param string $attribute
     * @param string|int|float $start
     * @param string|int|float $end
     * @return Query
     */
    public static function between(string $attribute, $start, $end): Query
    {
        return new Query('between', $attribute, [$start, $end]);
    }

    /**
     * Starts With
     *
     * @param string $attribute
     * @param string $value
     * @return Query
     */
    public static function startsWith(string $attribute, string $value): Query
    {
        return new Query('startsWith', $attribute, $value);
    }

    /**
     * Ends With
     *
     * @param string $attribute
     * @param string $value
     * @return Query
     */
    public static function endsWith(string $attribute, string $value): Query
    {
        return new Query('endsWith', $attribute, $value);
    }

    /**
     * Select
     *
     * @param array<string> $attributes
     * @return Query
     */
    public static function select(array $attributes): Query
    {
        return new Query('select', null, $attributes);
    }

    /**
     * Cursor After
     *
     * @param string $documentId
     * @return Query
     */
    public static function cursorAfter(string $documentId): Query 
    {
        return new Query('cursorAfter', null, $documentId);
    }

    /**
     * Cursor Before
     *
     * @param string $documentId
     * @return Query
     */
    public static function cursorBefore(string $documentId): Query 
    {
        return new Query('cursorBefore', null, $documentId);
    }

    /**
     * Order Asc
     *
     * @param string $attribute
     * @return Query
     */
    public static function orderAsc(string $attribute): Query 
    {
        return new Query('orderAsc', $attribute, null);
    }

    /**
     * Order Desc
     *
     * @param string $attribute
     * @return Query
     */
    public static function orderDesc(string $attribute): Query 
    {
        return new Query('orderDesc', $attribute, null);
    }

    /**
     * Limit
     *
     * @param int $limit
     * @return Query
     */
    public static function limit(int $limit): Query 
    {
        return new Query('limit', null, $limit);
    }

    /**
     * Offset
     *
     * @param int $offset
     * @return Query
     */
    public static function offset(int $offset): Query 
    {
        return new Query('offset', null, $offset);
    }

    /**
     * Contains
     *
     * @param string $attribute
     * @param string $value
     * @return Query
     */
    public static function contains(string $attribute, string $value): Query
    {
        return new Query('contains', $attribute, $value);
    }

    /**
     * Or
     *
     * @param array<Query> $queries
     * @return Query
     */
    public static function or(array $queries): Query
    {
        return new Query('or', null, $queries);
    }

    /**
     * And
     *
     * @param array<Query> $queries
     * @return Query
     */
    public static function and(array $queries): Query
    {
        return new Query('and', null, $queries);
    }
}
