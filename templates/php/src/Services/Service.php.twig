<?php

namespace {{ spec.title | caseUcfirst }}\Services;

use Exception;
use {{ spec.title | caseUcfirst }}\Client;
use {{ spec.title | caseUcfirst }}\Service;

class {{ service.name | caseUcfirst }} extends Service
{
{% for method in service.methods %}
    /**
     * {{ method.title }}
     *
{% if method.description %}
{{ method.description|comment1 }}
     *
{% endif %}
{% for parameter in method.parameters.all %}
     * @param {{ parameter.type | typeName }} ${{ parameter.name | caseCamel }}
{% endfor %}
     * @throws Exception
     * @return array
     */
    public function {{ method.name | caseCamel }}({% for parameter in method.parameters.all %}{{ parameter.type | typeName }}${{ parameter.name | caseCamel }}{{ parameter | paramDefault }}{% if not loop.last %}, {% endif %}{% endfor %}):array
    {
        $path   = str_replace([{% for parameter in method.parameters.path %}'{{ '{' }}{{ parameter.name | caseCamel }}{{ '}' }}'{% if not loop.last %}, {% endif %}{% endfor %}], [{% for parameter in method.parameters.path %}${{ parameter.name | caseCamel }}{% if not loop.last %}, {% endif %}{% endfor %}], '{{ method.path }}');
        $params = [];

{% for parameter in method.parameters.query %}
        $params['{{ parameter.name }}'] = ${{ parameter.name | caseCamel }};
{% endfor %}
{% for parameter in method.parameters.body %}
        $params['{{ parameter.name }}'] = ${{ parameter.name | caseCamel }};
{% endfor %}
{% for parameter in method.parameters.formData %}
        $params['{{ parameter.name }}'] = ${{ parameter.name | caseCamel }};
{% endfor %}

        return $this->client->call(Client::METHOD_{{ method.method | caseUpper }}, $path, [
{% for parameter in method.parameters.header %}
            '{{ parameter.name }}' => ${{ parameter.name | caseCamel }},
{% endfor %}
{% for key, header in method.headers %}
            '{{ key }}' => '{{ header }}',
{% endfor %}
        ], $params);
    }

{% endfor %}
}