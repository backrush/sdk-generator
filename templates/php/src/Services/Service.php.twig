<?php

namespace {{ spec.title | caseUcfirst }}\Services;

use {{ spec.title | caseUcfirst }}\{{spec.title | caseUcfirst}}Exception;
use {{ spec.title | caseUcfirst }}\Client;
use {{ spec.title | caseUcfirst }}\Service;

class {{ service.name | caseUcfirst }} extends Service
{
{% for method in service.methods %}
    /**
     * {{ method.title }}
     *
{% if method.description %}
{{ method.description|comment1 }}
     *
{% endif %}
{% for parameter in method.parameters.all %}
     * @param {{ parameter.type | typeName }}${{ parameter.name | caseCamel }}
{% endfor %}
     * @throws {{spec.title | caseUcfirst}}Exception
     * @return {% if method.type == 'location' %}string{% else %}array{% endif %}

     */
    public function {{ method.name | caseCamel }}({% for parameter in method.parameters.all %}{{ parameter.type | typeName }}${{ parameter.name | caseCamel }}{% if not parameter.required %} = null{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}): {% if method.type == 'location' %}string{% else %}array{% endif %}

    {
{% for parameter in method.parameters.all %}
{% if parameter.required %}
        if (empty(${{ parameter.name | caseCamel }})) {
            throw new {{spec.title | caseUcfirst}}Exception('Missing required parameter: "{{ parameter.name | caseCamel }}"');
        }

{% endif %}
{% endfor %}
        $path   = str_replace([{% for parameter in method.parameters.path %}'{{ '{' }}{{ parameter.name | caseCamel }}{{ '}' }}'{% if not loop.last %}, {% endif %}{% endfor %}], [{% for parameter in method.parameters.path %}${{ parameter.name | caseCamel }}{% if not loop.last %}, {% endif %}{% endfor %}], '{{ method.path }}');
        $params = [];

{% for parameter in method.parameters.query %}
        if (!is_null(${{ parameter.name | caseCamel }})) {
            $params['{{ parameter.name }}'] = ${{ parameter.name | caseCamel }};
        }

{% endfor %}
{% for parameter in method.parameters.body %}
        if (!is_null(${{ parameter.name | caseCamel }})) {
            $params['{{ parameter.name }}'] = ${{ parameter.name | caseCamel }};
        }

{% endfor %}
{% for parameter in method.parameters.formData %}
        if (!is_null(${{ parameter.name | caseCamel }})) {
            $params['{{ parameter.name }}'] = ${{ parameter.name | caseCamel }};
        }

{% endfor %}
{% if 'multipart/form-data' in method.consumes %}
{% for parameter in method.parameters.all %}
{% if parameter.type == 'file' %}
        $size = filesize(${{ parameter.name | caseCamel }});
        //send single file if size is less than or equal to 5MB
        if ($size <= Client::CHUNK_SIZE) {
            $params['{{ parameter.name }}'] = new \CURLFile(${{ parameter.name | caseCamel }});
            return $this->client->call(Client::METHOD_{{ method.method | caseUpper }}, $path, [
{% for param in method.parameters.header %}
                '{{ param.name }}' => ${{ param.name | caseCamel }},
{% endfor %}
{% for key, header in method.headers %}
                '{{ key }}' => '{{ header }}',
{% endfor %}
                ], $params);
        } else {
            $handle = @fopen(${{ parameter.name | caseCamel }}, "rb");
            $mimeType = mime_content_type(${{ parameter.name | caseCamel }});
            $counter = 0;
            while (!feof($handle)) {
                $params['{{ parameter.name }}'] = new \CURLFile('data://' . $mimeType . ';base64,' . base64_encode(@fread($handle, Client::CHUNK_SIZE)), $mimeType, pathinfo(${{ parameter.name | caseCamel }}, PATHINFO_FILENAME));
                $contentRanges = 'bytes ' . ($counter * Client::CHUNK_SIZE) . '-' . min(((($counter * Client::CHUNK_SIZE) + Client::CHUNK_SIZE) - 1), $size) . '/' . $size;
                $response = $this->client->call(Client::METHOD_POST, $path, [
                    'content-type' => 'multipart/form-data',
                    'content-range' => $contentRanges,
                    'x-appwrite-id' => ${{ method.parameters.all[0].name | caseCamel }},
                ], $params);
                $counter++;
                ${{ method.parameters.all[0].name | caseCamel }} = $response['body']['$id']; {# Asuming that with custom ID support, the first parameter will always be the ID, however this breaks if the endpoint doesn't support custom id for example create Tag #}
            }
            @fclose($handle);
            return $response;
        }
{% endif %}
{% endfor %}
{% else %}
        return $this->client->call(Client::METHOD_{{ method.method | caseUpper }}, $path, [
{% for parameter in method.parameters.header %}
            '{{ parameter.name }}' => ${{ parameter.name | caseCamel }},
{% endfor %}
{% for key, header in method.headers %}
            '{{ key }}' => '{{ header }}',
{% endfor %}
        ], $params);
{% endif %}
    }
{% if not loop.last %}

{% endif %}
{% endfor %}
}