module Appwrite
  class Payload
    attr_reader :filename
    attr_reader :size

    def initialize(data, path, filename)
      @path = path
      @data = data
      @filename = filename

      @size = if @data then
        @data.bytesize
      else
        File.size(@path)
      end
    end

    def read(offset: 0, length: nil)
      if @data then
        @data.byteslice(offset, length || @data.bytesize)
      else
        IO.read(@path, length || File.size(@path), offset)
      end
    end

    # @param [String] path
    # @param [String, nil] filename
    # @return [Payload]
    def self.from_file(path, filename: nil)
      filename = if filename.nil? then
        File.basename(path)
      else
        filename
      end
      new(nil, path, filename)
    end

    # @param [String] bytes
    # @param [String, nil] filename
    def self.from_binary(bytes, filename: nil)
      new(bytes, nil, filename)
    end

    # @param [Hash, Array] object
    # @param [String, nil] filename
    def self.from_json(object, filename: nil)
      json = JSON.generate(object) if object.is_a?(Hash) || object.is_a?(Array)
      new(json, nil, filename)
    end

    # @param [String] string
    # @param [String, nil] filename
    def self.from_string(string, filename: nil)
      new(string, nil, filename)
    end

    # @return [String]
    def to_s
      read()
    end

    alias :to_string :to_s
    alias :to_binary :to_s

    # @return [Hash]
    def to_json
      JSON.parse(read())
    end

    # @param [String] path  
    def to_file(path)
      File.open(path, 'w') { |f| f.write(read()) }
    end
  end
end
