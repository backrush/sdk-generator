module Appwrite
  class Payload
    attr_accessor :data, :mime_type, :filename, :path

    def size 
      unless @data.nil?
        return @data.bytesize
      end
      unless @path.nil?
        return File.size(@path)
      end
      raise "Empty payload"
    end

    def initialize(data = nil, path = nil, mime_type = nil, filename = nil)
      @path = path
      @data = data

      @filename = if filename.nil? and path then
        File.basename(path)
      else
        filename
      end

      @mime_type = if mime_type.nil? and path then
        MIME::Types.type_for(path).first.content_type rescue nil
      else
        mime_type
      end
    end

    def self.from_path(path, mime_type = nil, filename = nil)
      raise "File not found" unless File.exist?(path)
      new(nil, path, mime_type, filename)
    end

    def self.from_data(data, mime_type = nil, filename = nil)
      new(data, nil, mime_type, filename)
    end

    def self.from_json(data, mime_type = 'application/json', filename = nil)
      new(JSON.generate(data), nil, mime_type, filename)
    end

    def self.from_string(data, mime_type = 'text/plain', filename = nil)
      new(data, nil, mime_type, filename)
    end

    def to_binary
      @data || File.binread(@path)
    end

    def to_json
      JSON.parse(@data)
    end

    def to_s
      @data
    end

    def self.handle_form_data(boundary, response_body)
      parts = response_body.split(boundary)
      data = {}
      
      parts.each do |part|
        lines = part.split("\r\n").reject(&:empty?)
        match_data = /name="?(?<name>\w+)/.match(part)
        
        if match_data
          name = match_data[:name]
          data[name] = lines[1] || ''
        end
      end

      data['responseStatusCode'] = data['responseStatusCode'].to_i
      data['duration'] = data['duration'].to_f
      data['responseBody'] = from_string(data['responseBody'] || '')
      data
    end
  end
end
