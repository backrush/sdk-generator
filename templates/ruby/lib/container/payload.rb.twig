module {{ spec.title | caseUcfirst }}
  class Payload
    attr_accessor :data, :mime_type, :filename, :path

    def size 
      unless @data.nil?
        return @data.bytesize
      end
      unless @path.nil?
        return File.size(@path)
      end
      return 0
    end

    def initialize(data: nil, mime_type: nil, filename: nil, path: nil)
      @data = data
      @mime_type = mime_type
      @filename = filename
      @path = path
    end

    def self.from_path(path, mime_type = nil, filename = nil)
      filename ||= File.basename(path)
      new(path: path, mime_type: mime_type, filename: filename)
    end

    def self.from_data(data, mime_type = nil, filename = nil)
      new(data: data, mime_type: mime_type, filename: filename)
    end

    def self.from_json(data, mime_type = 'application/json', filename = nil)
      new(data: JSON.generate(data), mime_type: mime_type, filename: filename)
    end

    def self.from_string(data, mime_type = 'text/plain', filename = nil)
      new(data: data, mime_type: mime_type, filename: filename)
    end

    def to_binary
      @data
    end

    def to_json
      JSON.parse(@data)
    end

    def to_s
      @data
    end

    def to_string
      @data
    end

    def self.handle_form_data(boundary, response_body)
      parts = response_body.split(boundary)
      data = {}
      
      parts.each do |part|
        lines = part.split("\r\n").reject(&:empty?)
        match_data = /name="?(?<name>\w+)/.match(part)
        
        if match_data
          name = match_data[:name]
          data[name] = lines[1] || ''
        end
      end

      data['responseStatusCode'] = data['responseStatusCode'].to_i
      data['duration'] = data['duration'].to_f
      data['responseBody'] = from_string(data['responseBody'] || '')
      data
    end
  end
end
