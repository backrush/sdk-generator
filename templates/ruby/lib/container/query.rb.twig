require 'json'

module {{spec.title | caseUcfirst}}
    class Query
        def initialize(method, attribute = nil, values = nil)
            @method = method
            @attribute = attribute

            if (values != nil)
                if (values.is_a?(Array))
                    @values = values
                else
                    @values = [values]
                end
            end
        end

        def to_json(*args)
            query = {
                "method" => @method
            }

            if (@attribute != nil)
                query["attribute"] = @attribute
            end

            if (@values != nil)
                query["values"] = @values
            end

            return query.to_json(*args)
        end

        def to_s
            return self.to_json
        end

        class << Query
            def equal(attribute, value)
                return Query.new("equal", attribute, value)
            end

            def not_equal(attribute, value)
                return Query.new("notEqual", attribute, value)
            end

            def less_than(attribute, value)
                return Query.new("lessThan", attribute, value)
            end
            
            def less_than_equal(attribute, value)
                return Query.new("lessThanEqual", attribute, value)
            end
            
            def greater_than(attribute, value)
                return Query.new("greaterThan", attribute, value)
            end
            
            def greater_than_equal(attribute, value)
                return Query.new("greaterThanEqual", attribute, value)
            end

            def is_null(attribute)
                return Query.new("isNull", attribute, nil)
            end

            def is_not_null(attribute)
                return Query.new("isNotNull", attribute, nil)
            end

            def between(attribute, start, ending)
                return Query.new("between", attribute, [start, ending])
            end

            def starts_with(attribute, value)
                return Query.new("startsWith", attribute, value)
            end

            def ends_with(attribute, value)
                return Query.new("endsWith", attribute, value)
            end

            def select(attributes)
                return Query.new("select", nil, attributes)
            end
            
            def search(attribute, value)
                return Query.new("search", attribute, value)
            end

            def order_asc(attribute)
                return Query.new("orderAsc", attribute, nil)
            end

            def order_desc(attribute)
                return Query.new("orderDesc", attribute, nil)
            end

            def cursor_before(id)
                return Query.new("cursorBefore", nil, id)
            end

            def cursor_after(id)
                return Query.new("cursorAfter", nil, id)
            end

            def limit(limit)
                return Query.new("limit", nil, limit)
            end

            def offset(offset)
                return Query.new("offset", nil, offset)
            end

            def contains(attribute, value)
                return Query.new("contains", attribute, value)
            end

            def or(queries)
                return Query.new("or", nil, queries)
            end
        end
    end
end