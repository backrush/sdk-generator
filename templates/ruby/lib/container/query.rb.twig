require 'json'

module {{spec.title | caseUcfirst}}
    class Query
        class << Query
            def equal(attribute, value)
                return build_query("equal", attribute, value)
            end

            def not_equal(attribute, value)
                return build_query("notEqual", attribute, value)
            end

            def less_than(attribute, value)
                return build_query("lessThan", attribute, value)
            end
            
            def less_than_equal(attribute, value)
                return build_query("lessThanEqual", attribute, value)
            end
            
            def greater_than(attribute, value)
                return build_query("greaterThan", attribute, value)
            end
            
            def greater_than_equal(attribute, value)
                return build_query("greaterThanEqual", attribute, value)
            end

            def is_null(attribute)
                return build_query("isNull", attribute, nil)
            end

            def is_not_null(attribute)
                return build_query("isNotNull", attribute, nil)
            end

            def between(attribute, start, ending)
                return build_query("between", attribute, [start, ending])
            end

            def starts_with(attribute, value)
                return build_query("startsWith", attribute, value)
            end

            def ends_with(attribute, value)
                return build_query("endsWith", attribute, value)
            end

            def select(attributes)
                return build_query("select", attributes, nil)
            end
            
            def search(attribute, value)
                return build_query("search", attribute, value)
            end

            def order_asc(attribute)
                return build_query("orderAsc", attribute, nil)
            end

            def order_desc(attribute)
                return build_query("orderDesc", attribute, nil)
            end

            def cursor_before(id)
                return build_query("cursorBefore", nil, id)
            end

            def cursor_after(id)
                return build_query("cursorAfter", nil, id)
            end

            def limit(limit)
                return build_query("limit", nil, limit)
            end

            def offset(offset)
                return build_query("offset", nil, offset)
            end

            private def build_query(method, attribute, values)
                query = {:method => method}

                if (attribute != nil)
                    query[:attribute] = attribute
                end

                if (values != nil)
                    query[:values] = values
                end

                JSON.generate(query)
            end
        end
    end
end