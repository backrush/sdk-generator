/** @typedef {import('../attribute').Attribute} Attribute */
const { AttributeType } = require('../attribute');
const { LanguageMeta } = require("./language");

class Python extends LanguageMeta {
  getType(attribute) {
    let type = ""
    switch (attribute.type) {
      case AttributeType.STRING:
      case AttributeType.EMAIL:
      case AttributeType.DATETIME:
      case AttributeType.ENUM:
        type = "str";
        break;
      case AttributeType.INTEGER:
        type = "int";
        break;
      case AttributeType.FLOAT:
        type = "float";
        break;
      case AttributeType.BOOLEAN:
        type = "bool";
        break;
      case AttributeType.RELATIONSHIP:
        type = "typing.Any";
      default:
        throw new Error(`Unknown attribute type: ${attribute.type}`);
    }
    if (attribute.array) {
      type = `typing.List[${type}]`;
    }
    if (attribute.required) {
      type += " | None";
    }
    return type;
  }

  isSingleFile() {
    return true;
  }

  getTemplate() {
    return `import typing

<% for (const collection of collections) { %>
class <%- toPascalCase(collection.name) %>(typing.TypedDict):
<% for (const attribute of collection.attributes) { -%>
    <%- toSnakeCase(attribute.key) %>: <%- getType(attribute) %>
<% } -%>

<% } -%>`;
  }

  getFileName(_) {
    return "collections.py";
  }
}

module.exports = { Python };
