const fs = require("fs");
const path = require("path");
const net = require("net");
const childProcess = require('child_process');

function getAllFiles(folder) {
    const files = [];
    for(const pathDir of fs.readdirSync(folder)) {
        const pathAbsolute = path.join(folder, pathDir);
        if (fs.statSync(pathAbsolute).isDirectory()) {
            files.push(...getAllFiles(pathAbsolute));
        } else {
            files.push(pathAbsolute);
        }
    }
    return files;
}

async function isPortTaken(port) {
    const taken = await new Promise((res, rej) => {
        const tester = net.createServer()
        .once('error', function (err) {
            if (err.code != 'EADDRINUSE') return rej(err)
                res(true)
            })
            .once('listening', function() {
                tester.once('close', function() { res(false) })
                .close()
            })
            .listen(port);
    });

    return taken;
}

function systemHasCommand(command) {
    const isUsingWindows = process.platform == 'win32'

     try {
        if(isUsingWindows) {
            childProcess.execSync('where ' + command, { stdio: 'pipe' })
        } else {
            childProcess.execSync(`[[ $(${command} --version) ]] || { exit 1; } && echo "OK"`, { stdio: 'pipe', shell: '/bin/bash' });
        }
    } catch (error) {
        console.log(error);
        return false;
    }

    return true;
}

module.exports = {
    getAllFiles,
    isPortTaken,
    systemHasCommand
};
