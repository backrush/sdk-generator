const { Command } = require("commander");
const inquirer = require("inquirer");
const { projectsCreate } = require("./projects");
const { storageCreateBucket } = require("./storage");
const { messagingCreateTopic } = require("./messaging");
const { sdkForConsole } = require("../sdks");
const { localConfig } = require("../config");
const { questionsCreateProject, questionsCreateBucket, questionsCreateMessagingTopic } = require("../questions");
const { success, error, actionRunner, commandDescriptions } = require("../parser");

const create = new Command("create")
    .description(commandDescriptions['create'])
    .configureHelp({
        helpWidth: process.stdout.columns || 80
    })
    .action(actionRunner(async (_options, command) => {
        command.help();
    }));

const createProject = async () => {
    let response = {}
    const answers = await inquirer.prompt(questionsCreateProject)
    if (!answers.project || !answers.organization) process.exit(1)

    response = await projectsCreate({
        projectId: answers.id,
        name: answers.project,
        teamId: answers.organization.id,
        parseOutput: false
    })

    localConfig.setProject(response['$id'], response.name);
    success();
}

const createBucket = async () => {
    let response = {}
    const answers = await inquirer.prompt(questionsCreateBucket)
    if (!answers.bucket || !answers.id || !answers.fileSecurity) process.exit(1)

    try {
        response = await storageCreateBucket({
            bucketId: answers.id,
            name: answers.bucket,
            fileSecurity: answers.fileSecurity.toLowerCase() === 'yes',
            enabled: true,
            parseOutput: false
        })

        localConfig.addBucket(response);
        success();
    } catch (e) {
        error(e.getMessage ?? 'Unknown error occurred. Please try again');
    }
};

const createCollection = async () => {

};

const createTopic = async () => {
    let response = {}
    const answers = await inquirer.prompt(questionsCreateMessagingTopic)
    if (!answers.topic || !answers.id) process.exit(1)

    try {
        response = await messagingCreateTopic({
            topicId: answers.id,
            name: answers.topic,
            parseOutput: false
        })

        {#localConfig.addMessagingTopic(response);#}
        success();
    } catch (e) {
        error(e.getMessage ?? 'Unknown error occurred. Please try again');
    }
};

const createFunction = async () => {

};





create
    .command("project")
    .description("Create a new {{ spec.title|caseUcfirst }} project")
    .action(actionRunner(createProject));

create
    .command("function")
    .description("Create a new {{ spec.title|caseUcfirst }} function")
    .action(actionRunner(createFunction));

create
    .command("bucket")
    .description("Create a new {{ spec.title|caseUcfirst }} bucket")
    .action(actionRunner(createBucket));

create
    .command("collection")
    .description("Create a new {{ spec.title|caseUcfirst }} collection")
    .action(actionRunner(createCollection));

create
    .command("topic")
    .description("Create a new {{ spec.title|caseUcfirst }} topic")
    .action(actionRunner(createTopic));

module.exports = {
    create,
};
