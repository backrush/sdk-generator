const ejs = require("ejs");
const fs = require("fs");
const path = require("path");
const { LanguageMeta, detectLanguage } = require("../type-generation/languages/language");
const { Command, Option, Argument } = require("commander");
const { localConfig } = require("../config");
const { success, log, actionRunner } = require("../parser");
const { PHP } = require("../type-generation/languages/php");
const { TypeScript } = require("../type-generation/languages/typescript");
const { Python } = require("../type-generation/languages/python");
const { Kotlin } = require("../type-generation/languages/kotlin");
const { Swift } = require("../type-generation/languages/swift");

/**
 * @param {string} language
 * @returns {import("../type-generation/languages/language").LanguageMeta}
 */
function createLanguageMeta(language) {
  switch (language) {
    case "ts":
      return new TypeScript();
    case "php":
      return new PHP();
    case "python":
      return new Python();
    case "kotlin":
      return new Kotlin();
    case "swift":
      return new Swift();
    default:
      throw new Error(`Language '${language}' is not supported`);
  }
}

const templateHelpers = {
  toPascalCase: LanguageMeta.toPascalCase,
  toCamelCase: LanguageMeta.toCamelCase,
  toSnakeCase: LanguageMeta.toSnakeCase,
  toKebabCase: LanguageMeta.toKebabCase,
  toUpperSnakeCase: LanguageMeta.toUpperSnakeCase
}

const typesOutputArgument = new Argument(
  "<output-directory>",
  "The directory to write the types to"
);

const typesLanguageOption = new Option(
  "-l, --language <language>",
  "The language of the types"
)
  .choices(["ts", "php", "python", "kotlin", "swift"])
  .default("auto");

const typesCommand = actionRunner(async (rawOutputDirectory, {language}) => {
  if (language === "auto") {
    language = detectLanguage();
    log(`Detected language: ${language}`);
  }

  const meta = createLanguageMeta(language);

  const outputDirectory = path.resolve(rawOutputDirectory);
  if (!fs.existsSync(outputDirectory)) {
    log(`Directory: ${outputDirectory} does not exist, creating...`);
    fs.mkdirSync(outputDirectory, { recursive: true });
  }

  if (!fs.existsSync("appwrite.json")) {
    throw new Error("appwrite.json not found in current directory");
  }

  const collections = localConfig.getCollections();
  if (collections.length === 0) {
    throw new Error("No collections found in appwrite.json");
  }

  log(`Found ${collections.length} collections: ${collections.map(c => c.name).join(", ")}`);

  const totalAttributes = collections.reduce((count, collection) => count + collection.attributes.length, 0);
  log(`Found ${totalAttributes} attributes across all collections`);

  const templater = ejs.compile(meta.getTemplate());

  if (meta.isSingleFile()) {
    const content = templater({
      collections,
      ...templateHelpers,
      getType: meta.getType
    });

    const destination = path.join(outputDirectory, meta.getFileName());

    fs.writeFileSync(destination, content);
    log(`Added types to ${destination}`);
  } else {
    for (const collection of collections) {
      const content = templater({
        collection,
        ...templateHelpers,
        getType: meta.getType
      });
  
      const destination = path.join(outputDirectory, meta.getFileName(collection));
  
      fs.writeFileSync(destination, content);
      log(`Added types for ${collection.name} to ${destination}`);
    }
  }
  
  success();
});

const types = new Command("types")
  .description("Generate types for your Appwrite project")
  .addArgument(typesOutputArgument)
  .addOption(typesLanguageOption)
  .action(actionRunner(typesCommand));

module.exports = { types };
