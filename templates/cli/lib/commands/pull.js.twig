const fs = require("fs");
const tar = require("tar");
const { Command } = require("commander");
const inquirer = require("inquirer");
const { messagingListTopics } = require("./messaging");
const { teamsList } = require("./teams");
const { projectsGet } = require("./projects");
const { functionsList, functionsDownloadDeployment } = require("./functions");
const { databasesGet, databasesListCollections, databasesList } = require("./databases");
const { storageListBuckets } = require("./storage");
const { localConfig } = require("../config");
const { paginate } = require("../paginate");
const { questionsPullCollection, questionsPullFunctions } = require("../questions");
const { cliConfig, success, log, actionRunner, commandDescriptions } = require("../parser");

const pullProject = async () => {
    try {
        let response = await projectsGet({
            parseOutput: false,
            projectId: localConfig.getProject().projectId

        })

        localConfig.setProject(response.$id, response.name, response);

        success();
    } catch (e) {
        throw e;
    }
}

const pullFunctions = async () => {
    const localFunctions = localConfig.getFunctions();

    const functions = cliConfig.all
        ? (await paginate(functionsList, { parseOutput: false }, 100, 'functions')).functions
        : (await inquirer.prompt(questionsPullFunctions)).functions;

    log(`Pulling ${functions.length} functions`);

    for (let func of functions) {
        const functionExistLocally = localFunctions.find((localFunc) => localFunc['$id'] === func['$id']) !== undefined;

        if (functionExistLocally) {
            localConfig.updateFunction(func['$id'], func);
        } else {
            func['path'] = `functions/${func['$id']}`;
            localConfig.addFunction(func);
        }

        const localFunction = localFunctions.find((localFunc) => localFunc['$id'] === func['$id']);

        if (localFunction['deployment'] === '') {
            continue
        }

        const compressedFileName = `${func['$id']}-${+new Date()}.tar.gz`

        await functionsDownloadDeployment({
            functionId: func['$id'],
            deploymentId: func['deployment'],
            destination: compressedFileName,
            overrideForCli: true,
            parseOutput: false
        })

        tar.extract({
            sync: true,
            cwd: localFunction['path'],
            file: compressedFileName,
            strict: false,
        });

        fs.rmSync(compressedFileName);
        success(`Pulled ${func['name']} code and settings`)
    }
}

const pullCollection = async () => {
    let databases = cliConfig.ids;

    if (databases.length === 0) {
        if (cliConfig.all) {
            databases = (await paginate(databasesList, { parseOutput: false }, 100, 'databases')).databases.map(database=>database.$id);
        } else{
            databases = (await inquirer.prompt(questionsPullCollection)).databases;
        }
    }

    for (const databaseId of databases) {
        const database = await databasesGet({
            databaseId,
            parseOutput: false
        });

        localConfig.addDatabase(database);

        const { collections, total } = await paginate(databasesListCollections, {
            databaseId,
            parseOutput: false
        }, 100, 'collections');

        log(`Found ${total} collections`);

        collections.map(async collection => {
            log(`Fetching ${collection.name} ...`);
            localConfig.addCollection({
                ...collection,
                '$createdAt': undefined,
                '$updatedAt': undefined
            });
        });

        success();
    }

}

const pullBucket = async () => {
    const { buckets } = await paginate(storageListBuckets, { parseOutput: false }, 100, 'buckets');

    log(`Found ${buckets.length} buckets`);

    buckets.forEach(async bucket => {
        log(`Fetching ${bucket.name} ...`);
        localConfig.addBucket(bucket);
    });

    success();
}

const pullTeam = async () => {
    const { teams } = await paginate(teamsList, { parseOutput: false }, 100, 'teams');

    log(`Found ${teams.length} teams`);

    teams.forEach(async team => {
        log(`Fetching ${team.name} ...`);
        const { total, $updatedAt, $createdAt, prefs, ...rest } = team;
        localConfig.addTeam(rest);
    });

    success();
}

const pullMessagingTopic = async () => {
    const { topics } = await paginate(messagingListTopics, { parseOutput: false }, 100, 'topics');

    log(`Found ${topics.length} topics`);

    topics.forEach(async topic => {
        log(`Pulling ${topic.name} ...`);
        localConfig.addMessagingTopic(topic);
    });

    success();
}

const pull = new Command("pull")
    .description(commandDescriptions['pull'])
    .configureHelp({
        helpWidth: process.stdout.columns || 80
    });

pull
    .command("project")
    .description("Pulling your {{ spec.title|caseUcfirst }} project name, services and auth settings")
    .action(actionRunner(pullProject));

pull
    .command("functions")
    .description(`Pulling your {{ spec.title|caseUcfirst }} functions`)
    .action(actionRunner(pullFunctions));

pull
    .command("collections")
    .description("Pulling your {{ spec.title|caseUcfirst }} collections")
    .action(actionRunner(pullCollection))

pull
    .command("buckets")
    .description("Pulling your {{ spec.title|caseUcfirst }} buckets")
    .action(actionRunner(pullBucket))

pull
    .command("teams")
    .description("Pulling your {{ spec.title|caseUcfirst }} teams")
    .action(actionRunner(pullTeam))

pull
    .command("topics")
    .description("Initialise your Appwrite messaging topics")
    .action(actionRunner(pullMessagingTopic))

module.exports = {
    pull,
};
