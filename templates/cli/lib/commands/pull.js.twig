const fs = require("fs");
const tar = require("tar");
const { Command } = require("commander");
const inquirer = require("inquirer");
const { messagingCreateTopic, messagingListTopics } = require("./messaging");
const { teamsCreate, teamsList } = require("./teams");
const { projectsCreate } = require("./projects");
const { functionsList, functionsDownloadDeployment } = require("./functions");
const { databasesGet, databasesListCollections, databasesList } = require("./databases");
const { storageListBuckets } = require("./storage");
const { sdkForConsole } = require("../sdks");
const { localConfig } = require("../config");
const { paginate } = require("../paginate");
const { questionsPullProject, questionsPullCollection, questionsPullFunctions } = require("../questions");
const { success, log, actionRunner, commandDescriptions } = require("../parser");

const pull = new Command("pull")
    .description(commandDescriptions['pull'])
    .configureHelp({
        helpWidth: process.stdout.columns || 80
    })
    .action(actionRunner(async (_options, command) => {
        command.help();
    }));

const pullProject = async () => {
    const answers = await inquirer.prompt(questionsPullProject)
    if (!answers.project) process.exit(1)

    localConfig.setProject(answers.project.id, answers.project.name);
    success();
}

const pullFunctions = async ({ all, yes } = {}) => {
    let functions = [];
    let questions = questionsPullFunctions;

    const localFunctions = localConfig.getFunctions();

    if (all) {
        questions = yes ? [] : questionsPullFunctions[1];
        functions = (await paginate(functionsList, { parseOutput: false }, 100, 'functions')).functions;
    }

    const answers = await inquirer.prompt(questions);

    const overridingLocalChanges = yes ?? answers.override.toLowerCase() === "yes";
    const selectedFunctions = functions.length === 0 ? answers.functions : functions;

    for (let func of selectedFunctions) {
        const functionExistLocally = localFunctions.find((localFunc) => localFunc['$id'] === func['$id']) !== undefined;

        if (!overridingLocalChanges && functionExistLocally) {
            log(`Skipping locally found implementation of ${func['name']}`)
            continue;
        }
        if (functionExistLocally) {
            localConfig.updateFunction(func['$id'], func);
        } else {
            func['path'] = `functions/${func['$id']}`;
            localConfig.addFunction(func);
        }

        const localFunction = localFunctions.find((localFunc) => localFunc['$id'] === func['$id']);

        if (localFunction['deployment'] === '') {
            continue
        }

        const compressedFileName = `${+new Date()}.tar.gz`

        await functionsDownloadDeployment({
            functionId: func['$id'],
            deploymentId: func['deployment'],
            destination: compressedFileName,
            overrideForCli: true,
            parseOutput: false
        })

        tar.extract({
            sync: true,
            cwd: localFunction['path'],
            file: compressedFileName,
            strict: false,
        });

        fs.rmSync(compressedFileName);
        success(`Pulled ${func['name']} code and definition`)
    }
}

const pullCollection = async ({ all, databaseId } = {}) => {
    const databaseIds = [];

    if (databaseId) {
        databaseIds.push(databaseId);
    } else if (all) {
        let allDatabases = await databasesList({
            parseOutput: false
        })

        databaseIds.push(...allDatabases.databases.map((d) => d.$id));
    }

    if (databaseIds.length <= 0) {
        let answers = await inquirer.prompt(questionsPullCollection)
        if (!answers.databases) process.exit(1)
        databaseIds.push(...answers.databases);
    }

    for (const databaseId of databaseIds) {
        const database = await databasesGet({
            databaseId,
            parseOutput: false
        });

        localConfig.addDatabase(database);

        const { collections, total } = await paginate(databasesListCollections, {
            databaseId,
            parseOutput: false
        }, 100, 'collections');

        log(`Found ${total} collections`);

        collections.forEach(async collection => {
            log(`Fetching ${collection.name} ...`);
            localConfig.addCollection({
                ...collection,
                '$createdAt': undefined,
                '$updatedAt': undefined,
            });
        });
    }

    success();
}

const pullBucket = async () => {
    const { buckets } = await paginate(storageListBuckets, { parseOutput: false }, 100, 'buckets');

    log(`Found ${buckets.length} buckets`);

    buckets.forEach(async bucket => {
        log(`Fetching ${bucket.name} ...`);
        localConfig.addBucket(bucket);
    });

    success();
}

const pullTeam = async () => {
    const { teams } = await paginate(teamsList, { parseOutput: false }, 100, 'teams');

    log(`Found ${teams.length} teams`);

    teams.forEach(async team => {
        log(`Fetching ${team.name} ...`);
        const { total, $updatedAt, $createdAt, prefs, ...rest } = team;
        localConfig.addTeam(rest);
    });

    success();
}

const pullMessagingTopic = async () => {
    const { topics } = await paginate(messagingListTopics, { parseOutput: false }, 100, 'topics');

    log(`Found ${topics.length} topics`);

    topics.forEach(async topic => {
        log(`Pulling ${topic.name} ...`);
        localConfig.addMessagingTopic(topic);
    });

    success();
}

pull
    .command("project")
    .description("Pulling your Appwrite project")
    .action(actionRunner(pullProject));

pull
    .command("function")
    .description(`Pulling your Appwrite functions`)
    .option(`--yes`, `Flag to confirm all warnings`)
    .option(`--all`, `Flag to pull all functions`)
    .action(actionRunner(pullFunctions));

pull
    .command("collection")
    .description("Pulling your Appwrite collections")
    .option(`--databaseId <databaseId>`, `Database ID`)
    .option(`--all`, `Flag to pull all databases`)
    .action(actionRunner(pullCollection))

pull
    .command("bucket")
    .description("Pulling your Appwrite buckets")
    .action(actionRunner(pullBucket))

pull
    .command("team")
    .description("Pulling your Appwrite teams")
    .action(actionRunner(pullTeam))

pull
    .command("topic")
    .description("Initialise your Appwrite messaging topics")
    .action(actionRunner(pullMessagingTopic))

module.exports = {
    pull,
};
