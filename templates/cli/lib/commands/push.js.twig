const inquirer = require("inquirer");
const JSONbig = require("json-bigint")({ storeAsString: false });
const { Command } = require("commander");
const { localConfig, globalConfig } = require("../config");
const { Spinner, SPINNER_ARC, SPINNER_DOTS } = require('../spinner');
const { paginate } = require('../paginate');
const {
    questionsPushBuckets,
    questionsPushTeams,
    questionsPushFunctions,
    questionsGetEntrypoint,
    questionsPushCollections,
    questionsPushResources,
    questionsPushMessagingTopics
} = require("../questions");
const {
    cliConfig, actionRunner,
    success, log, error, commandDescriptions
} = require("../parser");
const { functionsGet, functionsCreate, functionsUpdate, functionsCreateDeployment, functionsUpdateDeployment, functionsGetDeployment, functionsListVariables, functionsDeleteVariable, functionsCreateVariable } = require('./functions');
const {
    databasesGet,
    databasesCreate,
    databasesUpdate,
    databasesCreateBooleanAttribute,
    databasesGetCollection,
    databasesCreateCollection,
    databasesCreateStringAttribute,
    databasesCreateIntegerAttribute,
    databasesCreateFloatAttribute,
    databasesCreateEmailAttribute,
    databasesCreateDatetimeAttribute,
    databasesCreateIndex,
    databasesCreateUrlAttribute,
    databasesCreateIpAttribute,
    databasesCreateEnumAttribute,
    databasesCreateRelationshipAttribute,
    databasesDeleteAttribute,
    databasesListAttributes,
    databasesListIndexes,
    databasesDeleteIndex,
    databasesUpdateCollection
} = require("./databases");
const {
    storageGetBucket, storageUpdateBucket, storageCreateBucket
} = require("./storage");
const {
    messagingGetTopic, messagingUpdateTopic, messagingCreateTopic
} = require("./messaging");
const {
    teamsGet,
    teamsUpdate,
    teamsCreate
} = require("./teams");

const STEP_SIZE = 100;      // Resources
const POLL_DEBOUNCE = 2000; // Milliseconds
const POLL_MAX_DEBOUNCE = 30; // Times

let pollMaxDebounces = 30;

const awaitPools = {
    wipeAttributes: async (databaseId, collectionId, iteration = 1) => {
        if (iteration > pollMaxDebounces) {
            return false;
        }

        const { total } = await databasesListAttributes({
            databaseId,
            collectionId,
            queries: [JSON.stringify({ method: 'limit', values: [1] })],
            parseOutput: false
        });

        if (total === 0) {
            return true;
        }

        let steps = Math.max(1, Math.ceil(total / STEP_SIZE));
        if (steps > 1 && iteration === 1) {
            pollMaxDebounces *= steps;

            log('Found a large number of attributes, increasing timeout to ' + (pollMaxDebounces * POLL_DEBOUNCE / 1000 / 60) + ' minutes')
        }

        await new Promise(resolve => setTimeout(resolve, POLL_DEBOUNCE));

        return await awaitPools.wipeAttributes(
            databaseId,
            collectionId,
            iteration + 1
        );
    },
    wipeIndexes: async (databaseId, collectionId, iteration = 1) => {
        if (iteration > pollMaxDebounces) {
            return false;
        }

        const { total } = await databasesListIndexes({
            databaseId,
            collectionId,
            queries: [JSON.stringify({ method: 'limit', values: [1] })],
            parseOutput: false
        });

        if (total === 0) {
            return true;
        }

        let steps = Math.max(1, Math.ceil(total / STEP_SIZE));
        if (steps > 1 && iteration === 1) {
            pollMaxDebounces *= steps;

            log('Found a large number of indexes, increasing timeout to ' + (pollMaxDebounces * POLL_DEBOUNCE / 1000 / 60) + ' minutes')
        }

        await new Promise(resolve => setTimeout(resolve, POLL_DEBOUNCE));

        return await awaitPools.wipeIndexes(
            databaseId,
            collectionId,
            iteration + 1
        );
    },
    wipeVariables: async (functionId, iteration = 1) => {
        if (iteration > pollMaxDebounces) {
            return false;
        }

        const { total } = await functionsListVariables({
            functionId,
            queries: ['limit(1)'],
            parseOutput: false
        });

        if (total === 0) {
            return true;
        }

        let steps = Math.max(1, Math.ceil(total / STEP_SIZE));
        if (steps > 1 && iteration === 1) {
            pollMaxDebounces *= steps;

            log('Found a large number of variables, increasing timeout to ' + (pollMaxDebounces * POLL_DEBOUNCE / 1000 / 60) + ' minutes')
        }

        await new Promise(resolve => setTimeout(resolve, POLL_DEBOUNCE));

        return await awaitPools.wipeVariables(
            functionId,
            iteration + 1
        );
    },
    expectAttributes: async (databaseId, collectionId, attributeKeys, iteration = 1) => {
        if (iteration > pollMaxDebounces) {
            return false;
        }

        let steps = Math.max(1, Math.ceil(attributeKeys.length / STEP_SIZE));
        if (steps > 1 && iteration === 1) {
            pollMaxDebounces *= steps;

            log('Creating a large number of attributes, increasing timeout to ' + (pollMaxDebounces * POLL_DEBOUNCE / 1000 / 60) + ' minutes')
        }

        const { attributes } = await paginate(databasesListAttributes, {
            databaseId,
            collectionId,
            parseOutput: false
        }, 100, 'attributes');

        const ready = attributes
            .filter(attribute => {
                if (attributeKeys.includes(attribute.key)) {
                    if (['stuck', 'failed'].includes(attribute.status)) {
                        throw new Error(`Attribute '${attribute.key}' failed!`);
                    }

                    return attribute.status === 'available';
                }

                return false;
            })
            .map(attribute => attribute.key);

        if (ready.length === attributeKeys.length) {
            return true;
        }

        await new Promise(resolve => setTimeout(resolve, POLL_DEBOUNCE));

        return await awaitPools.expectAttributes(
            databaseId,
            collectionId,
            attributeKeys,
            iteration + 1
        );
    },
    expectIndexes: async (databaseId, collectionId, indexKeys, iteration = 1) => {
        if (iteration > pollMaxDebounces) {
            return false;
        }

        let steps = Math.max(1, Math.ceil(indexKeys.length / STEP_SIZE));
        if (steps > 1 && iteration === 1) {
            pollMaxDebounces *= steps;

            log('Creating a large number of indexes, increasing timeout to ' + (pollMaxDebounces * POLL_DEBOUNCE / 1000 / 60) + ' minutes')
        }

        const { indexes } = await paginate(databasesListIndexes, {
            databaseId,
            collectionId,
            parseOutput: false
        }, 100, 'indexes');

        const ready = indexes
            .filter((index) => {
                if (indexKeys.includes(index.key)) {
                    if (['stuck', 'failed'].includes(index.status)) {
                        throw new Error(`Index '${index.key}' failed!`);
                    }

                    return index.status === 'available';
                }

                return false;
            })
            .map(index => index.key);

        if (ready.length >= indexKeys.length) {
            return true;
        }

        await new Promise(resolve => setTimeout(resolve, POLL_DEBOUNCE));

        return await awaitPools.expectIndexes(
            databaseId,
            collectionId,
            indexKeys,
            iteration + 1
        );
    },
}

const pushResources = async () => {
    const actions = {
        functions: pushFunction,
        collections: pushCollection,
        buckets: pushBucket,
        teams: pushTeam,
        messages: pushMessagingTopic
    }

    const answers = await inquirer.prompt(questionsPushResources);

    for (const resource of answers.resources) {
        const method = resource.value ? resource.value : resource;
        const action = actions[method];
        if (action !== undefined) {
            try {
                await action();
            } catch (e) {
                error(e);
            }
        }
    }

    process.exit(0);
};

const pushFunction = async ({ async } = {}) => {
    let response = {};

    const functionIds = (await inquirer.prompt(questionsPushFunctions.slice(0, 2))).functions;

    let functions = functionIds.map((functionId) => {
        const id = functionId.value ? functionId.value : functionId;

        const functions = localConfig.getFunctions();
        const func = functions.find((f) => f.$id === id);

        if (!func) {
            throw new Error("Function '" + id + "' not found.")
        }

        return func;
    });

    log('Validating functions');
    // Validation is done BEFORE pushing so the deployment process can be run in async with progress update
    for (let func of functions) {

        if (!func.entrypoint) {
            log(`Function ${func.name} does not have an endpoint`);
            const answers = await inquirer.prompt(questionsGetEntrypoint)
            func.entrypoint = answers.entrypoint;
            localConfig.updateFunction(func['$id'], func);
        }

        if (func.variables) {
            try {
                const { total } = await functionsListVariables({
                    functionId: func['$id'],
                    queries: [JSON.stringify({ method: 'limit', values: [1] })],
                    parseOutput: false
                });

                if (total === 0) {
                    func.pushVariables = true;
                } else if (total > 0 && !func.pushVariables) {
                    log(`The function ${func.name} has remote variables setup`);
                    const variableAnswers = await inquirer.prompt(questionsPushFunctions.slice(2, 4));
                    func.pushVariables = variableAnswers.setupoverride ? variableAnswers.setupoverride : variableAnswers.override.toLowerCase() === "yes";
                }
            } catch (e) {
                if (e.code != 404) {
                    throw e.message;
                }
            }
        }
    }


    log('All functions are validated');
    log('Pushing functions\n');

    Spinner.start(false);
    let successfullyPushed = 0;
    let successfullyDeployed = 0;
    const failedDeployments = [];

    await Promise.all(functions.map(async (func) => {
        const ignore = func.ignore ? 'appwrite.json' : '.gitignore';
        let functionExists = false;
        let deploymentCreated = false;

        const updaterRow = new Spinner({ status: '', resource: func.name, id: func['$id'], end: `Ignoring using: ${ignore}` });

        updaterRow.update({ status: 'Getting' }).startSpinner(SPINNER_DOTS);

        try {
            response = await functionsGet({
                functionId: func['$id'],
                parseOutput: false,
            });
            functionExists = true;
            if (response.runtime !== func.runtime) {
                updaterRow.fail({ errorMessage: `Runtime mismatch! (local=${func.runtime},remote=${response.runtime}) Please delete remote function or update your appwrite.json` })
                return;
            }

            updaterRow.update({ status: 'Updating' }).replaceSpinner(SPINNER_ARC);

            response = await functionsUpdate({
                functionId: func['$id'],
                name: func.name,
                execute: func.execute,
                events: func.events,
                schedule: func.schedule,
                timeout: func.timeout,
                enabled: func.enabled,
                logging: func.logging,
                entrypoint: func.entrypoint,
                commands: func.commands,
                vars: JSON.stringify(response.vars),
                parseOutput: false
            });
        } catch (e) {

            if (e.code == 404) {
                functionExists = false;
            } else {
                updaterRow.fail({ errorMessage: e.message ?? 'General error occurs please try again' });
                return;
            }
        }

        if (!functionExists) {
            updaterRow.update({ status: 'Creating' }).replaceSpinner(SPINNER_DOTS);

            try {
                response = await functionsCreate({
                    functionId: func.$id || 'unique()',
                    name: func.name,
                    runtime: func.runtime,
                    execute: func.execute,
                    events: func.events,
                    schedule: func.schedule,
                    timeout: func.timeout,
                    enabled: func.enabled,
                    logging: func.logging,
                    entrypoint: func.entrypoint,
                    commands: func.commands,
                    vars: JSON.stringify(func.vars),
                    parseOutput: false
                });

                localConfig.updateFunction(func['$id'], {
                    "$id": response['$id'],
                });
                func["$id"] = response['$id'];
                updaterRow.update({ status: 'Created' });
            } catch (e) {
                updaterRow.fail({ errorMessage: e.message ?? 'General error occurs please try again' });
                return;
            }
        }

        if (func.variables) {
            if (!func.pushVariables) {
                updaterRow.update({ end: 'Skipping variables' });
            } else {
                updaterRow.update({ end: 'Pushing variables' });

                const { variables } = await paginate(functionsListVariables, {
                    functionId: func['$id'],
                    parseOutput: false
                }, 100, 'variables');

                await Promise.all(variables.map(async variable => {
                    await functionsDeleteVariable({
                        functionId: func['$id'],
                        variableId: variable['$id'],
                        parseOutput: false
                    });
                }));

                let result = await awaitPools.wipeVariables(func['$id']);
                if (!result) {
                    updaterRow.fail({ errorMessage: 'Variable deletion timed out' })
                    return;
                }

                // Push local variables
                await Promise.all(Object.keys(func.variables).map(async localVariableKey => {
                    await functionsCreateVariable({
                        functionId: func['$id'],
                        key: localVariableKey,
                        value: func.variables[localVariableKey],
                        parseOutput: false
                    });
                }));
            }
        }

        try {
            updaterRow.update({ status: 'Pushing' }).replaceSpinner(SPINNER_ARC);
            response = await functionsCreateDeployment({
                functionId: func['$id'],
                entrypoint: func.entrypoint,
                commands: func.commands,
                code: func.path,
                activate: true,
                parseOutput: false
            })

            updaterRow.update({ status: 'Pushed' });
            deploymentCreated = true;
            successfullyPushed++;
        } catch (e) {
            switch (e.code) {
                case 'ENOENT':
                    updaterRow.fail({ errorMessage: 'Not found in the current directory. Skipping...' })
                    break;
                default:
                    updaterRow.fail({ errorMessage: e.message ?? 'An unknown error occurred. Please try again.' })
            }
        }

        if (deploymentCreated && !async) {
            try {
                const deploymentId = response['$id'];
                updaterRow.update({ status: 'Deploying', end: 'Checking deployment status...' })
                let pollChecks = 0;

                while (true) {
                    if (pollChecks >= POLL_MAX_DEBOUNCE) {
                        updaterRow.update({ end: 'Deployment is taking too long. Please check the console for more details.' })
                        break;
                    }

                    response = await functionsGetDeployment({
                        functionId: func['$id'],
                        deploymentId: deploymentId,
                        parseOutput: false
                    });


                    const status = response['status'];
                    if (status === 'ready') {
                        updaterRow.update({ status: 'Deployed' });
                        successfullyDeployed++;

                        break;
                    } else if (status === 'failed') {
                        failedDeployments.push({ name: func['name'], $id: func['$id'], deployment: response['$id'] });
                        updaterRow.fail({ errorMessage: `Failed to deploy` });

                        break;
                    } else {
                        updaterRow.update({ status: 'Deploying', end: `Current status: ${status}` })
                    }

                    pollChecks++;
                    await new Promise(resolve => setTimeout(resolve, POLL_DEBOUNCE));
                }
            } catch (e) {
                updaterRow.fail({ errorMessage: e.message ?? 'Unknown error occurred. Please try again' })
            }
        }

        updaterRow.stopSpinner();
    }));

    Spinner.stop();
    console.log('\n');

    failedDeployments.forEach((failed) => {
        const { name, deployment, $id } = failed;
        const failUrl = `${globalConfig.getEndpoint().replace('/v1', '')}/console/project-${localConfig.getProject().projectId}/functions/function-${$id}/deployment-${deployment}`;

        error(`Deployment of ${name} has failed. Check at ${failUrl} for more details\n`);
    })

    success(`Pushed ${successfullyPushed} functions with ${successfullyDeployed} successful deployments.`);

    process.exit(0);
}

const createAttribute = async (databaseId, collectionId, attribute) => {
    switch (attribute.type) {
        case 'string':
            switch (attribute.format) {
                case 'email':
                    return await databasesCreateEmailAttribute({
                        databaseId,
                        collectionId,
                        key: attribute.key,
                        required: attribute.required,
                        xdefault: attribute.default,
                        array: attribute.array,
                        parseOutput: false
                    })
                case 'url':
                    return await databasesCreateUrlAttribute({
                        databaseId,
                        collectionId,
                        key: attribute.key,
                        required: attribute.required,
                        xdefault: attribute.default,
                        array: attribute.array,
                        parseOutput: false
                    })
                case 'ip':
                    return await databasesCreateIpAttribute({
                        databaseId,
                        collectionId,
                        key: attribute.key,
                        required: attribute.required,
                        xdefault: attribute.default,
                        array: attribute.array,
                        parseOutput: false
                    })
                case 'enum':
                    return await databasesCreateEnumAttribute({
                        databaseId,
                        collectionId,
                        key: attribute.key,
                        elements: attribute.elements,
                        required: attribute.required,
                        xdefault: attribute.default,
                        array: attribute.array,
                        parseOutput: false
                    })
                default:
                    return await databasesCreateStringAttribute({
                        databaseId,
                        collectionId,
                        key: attribute.key,
                        size: attribute.size,
                        required: attribute.required,
                        xdefault: attribute.default,
                        array: attribute.array,
                        parseOutput: false
                    })

            }
        case 'integer':
            return await databasesCreateIntegerAttribute({
                databaseId,
                collectionId,
                key: attribute.key,
                required: attribute.required,
                min: attribute.min,
                max: attribute.max,
                xdefault: attribute.default,
                array: attribute.array,
                parseOutput: false
            })
        case 'double':
            return databasesCreateFloatAttribute({
                databaseId,
                collectionId,
                key: attribute.key,
                required: attribute.required,
                min: attribute.min,
                max: attribute.max,
                xdefault: attribute.default,
                array: attribute.array,
                parseOutput: false
            })
        case 'boolean':
            return databasesCreateBooleanAttribute({
                databaseId,
                collectionId,
                key: attribute.key,
                required: attribute.required,
                xdefault: attribute.default,
                array: attribute.array,
                parseOutput: false
            })
        case 'datetime':
            return databasesCreateDatetimeAttribute({
                databaseId,
                collectionId,
                key: attribute.key,
                required: attribute.required,
                xdefault: attribute.default,
                array: attribute.array,
                parseOutput: false
            })
        case 'relationship':
            return databasesCreateRelationshipAttribute({
                databaseId,
                collectionId,
                relatedCollectionId: attribute.relatedCollection,
                type: attribute.relationType,
                twoWay: attribute.twoWay,
                key: attribute.key,
                twoWayKey: attribute.twoWayKey,
                onDelete: attribute.onDelete,
                parseOutput: false
            })
    }

    process.exit(0);
}

const pushCollection = async () => {
    let response = {};

    const collections = [];

    const answers = await inquirer.prompt(questionsPushCollections.slice(0, 2))

    const configCollections = new Map();

    localConfig.getCollections().forEach((c) => {
        configCollections.set(`${c['databaseId']}|${c['$id']}`, c);
    });

    answers.collections.forEach((c) => {
        const id = c.value ? c.value : c;
        const collection = configCollections.get(id);
        collections.push(collection);
    })

    for (let collection of collections) {
        log(`Pushing collection ${collection.name} ( ${collection['databaseId']} - ${collection['$id']} )`)

        let databaseId;

        const localDatabase = localConfig.getDatabase(collection.databaseId);

        try {
            const database = await databasesGet({
                databaseId: collection.databaseId,
                parseOutput: false,
            });

            databaseId = database.$id;

            if (database.name !== (localDatabase.name ?? collection.databaseId)) {
                await databasesUpdate({
                    databaseId: collection.databaseId,
                    name: localDatabase.name ?? collection.databaseId,
                    parseOutput: false
                })

                success(`Updated ${localDatabase.name} ( ${collection.databaseId} )`);
            }
        } catch (err) {
            log(`Database ${collection.databaseId} not found. Creating it now...`);

            const database = await databasesCreate({
                databaseId: collection.databaseId,
                name: localDatabase.name ?? collection.databaseId,
                parseOutput: false,
            });

            databaseId = database.$id;
        }

        try {
            response = await databasesGetCollection({
                databaseId,
                collectionId: collection['$id'],
                parseOutput: false,
            })

            log(`Collection ${collection.name} ( ${collection['$id']} ) already exists.`);

            const answers = await inquirer.prompt(questionsPushCollections.slice(2, 4))
            const override = answers.setupoverride ? answers.setupoverride : answers.override.toLowerCase() === "yes";
            if (!override) {
                log(`Skipping ${collection.name} ( ${collection['$id']} )`);
                continue;
            }

            log(`Deleting indexes and attributes ... `);

            const { indexes } = await paginate(databasesListIndexes, {
                databaseId,
                collectionId: collection['$id'],
                parseOutput: false
            }, 100, 'indexes');

            await Promise.all(indexes.map(async index => {
                await databasesDeleteIndex({
                    databaseId,
                    collectionId: collection['$id'],
                    key: index.key,
                    parseOutput: false
                });
            }));

            let result = await awaitPools.wipeIndexes(databaseId, collection['$id']);
            if (!result) {
                throw new Error("Index deletion timed out.");
            }

            const { attributes } = await paginate(databasesListAttributes, {
                databaseId,
                collectionId: collection['$id'],
                parseOutput: false
            }, 100, 'attributes');

            await Promise.all(attributes.map(async attribute => {
                await databasesDeleteAttribute({
                    databaseId,
                    collectionId: collection['$id'],
                    key: attribute.key,
                    parseOutput: false
                });
            }));

            const deleteAttributesPoolStatus = await awaitPools.wipeAttributes(databaseId, collection['$id']);
            if (!deleteAttributesPoolStatus) {
                throw new Error("Attribute deletion timed out.");
            }

            await databasesUpdateCollection({
                databaseId,
                collectionId: collection['$id'],
                name: collection.name,
                documentSecurity: collection.documentSecurity,
                permissions: collection['$permissions'],
                enabled: collection.enabled,
                parseOutput: false
            })
        } catch (e) {
            if (e.code == 404) {
                log(`Collection ${collection.name} does not exist in the project. Creating ... `);
                response = await databasesCreateCollection({
                    databaseId,
                    collectionId: collection['$id'],
                    name: collection.name,
                    documentSecurity: collection.documentSecurity,
                    permissions: collection['$permissions'],
                    parseOutput: false
                })

            } else {
                throw e;
            }
        }

        // Create all non-relationship attributes first
        const attributes = collection.attributes.filter(attribute => attribute.type !== 'relationship');

        await Promise.all(attributes.map(attribute => {
            return createAttribute(databaseId, collection['$id'], attribute);
        }));

        let result = await awaitPools.expectAttributes(
            databaseId,
            collection['$id'],
            attributes.map(attribute => attribute.key)
        );

        if (!result) {
            throw new Error("Attribute creation timed out.");
        }

        success(`Created ${attributes.length} non-relationship attributes`);

        log(`Creating indexes ...`)

        await Promise.all(collection.indexes.map(async index => {
            await databasesCreateIndex({
                databaseId,
                collectionId: collection['$id'],
                key: index.key,
                type: index.type,
                attributes: index.attributes,
                orders: index.orders,
                parseOutput: false
            });
        }));

        result = await awaitPools.expectIndexes(
            databaseId,
            collection['$id'],
            collection.indexes.map(attribute => attribute.key)
        );

        if (!result) {
            throw new Error("Index creation timed out.");
        }

        success(`Created ${collection.indexes.length} indexes`);

        success(`Pushed ${collection.name} ( ${collection['$id']} )`);
    }

    // Create the relationship attributes
    for (let collection of collections) {
        const relationships = collection.attributes.filter(attribute =>
            attribute.type === 'relationship' && attribute.side === 'parent'
        );

        if (relationships.length === 0) {
            continue;
        }

        log(`Pushing relationships for collection ${collection.name} ( ${collection['$id']} )`);

        await Promise.all(relationships.map(attribute => {
            return createAttribute(collection['databaseId'], collection['$id'], attribute);
        }));

        let result = await awaitPools.expectAttributes(
            collection['databaseId'],
            collection['$id'],
            relationships.map(attribute => attribute.key)
        );

        if (!result) {
            throw new Error("Attribute creation timed out.");
        }

        success(`Created ${relationships.length} relationship attributes`);
    }

    process.exit(0);
}

const pushBucket = async () => {
    let response = {};

    const bucketIds = (await inquirer.prompt(questionsPushBuckets.slice(0, 2))).buckets;
    const buckets = [];
    const configBuckets = localConfig.getBuckets();

    for (const bucketId of bucketIds) {
        const id = bucketId.value ? bucketId.value : bucketId;
        const idBuckets = configBuckets.filter((b) => b.$id === id);
        buckets.push(...idBuckets);
    }

    for (let bucket of buckets) {
        log(`Pushing bucket ${bucket.name} ( ${bucket['$id']} )`)

        try {
            response = await storageGetBucket({
                bucketId: bucket['$id'],
                parseOutput: false,
            })
            log(`Bucket ${bucket.name} ( ${bucket['$id']} ) already exists.`);

            const answers = await inquirer.prompt(questionsPushBuckets.slice(2, 4))
            const override = answers.setupoverride ? answers.setupoverride : answers.override.toLowerCase() === "yes";
            if (!override) {
                log(`Skipping ${bucket.name} ( ${bucket['$id']} )`);
                continue;
            }

            log(`Updating bucket ...`)

            await storageUpdateBucket({
                bucketId: bucket['$id'],
                name: bucket.name,
                permissions: bucket['$permissions'],
                fileSecurity: bucket.fileSecurity,
                enabled: bucket.enabled,
                maximumFileSize: bucket.maximumFileSize,
                allowedFileExtensions: bucket.allowedFileExtensions,
                compression: bucket.compression,
                encryption: bucket.encryption,
                antivirus: bucket.antivirus,
                compression: bucket.compression,
                parseOutput: false
            });

            success(`Pushed ${bucket.name} ( ${bucket['$id']} )`);
        } catch (e) {
            if (e.code == 404) {
                log(`Bucket ${bucket.name} does not exist in the project. Creating ... `);

                response = await storageCreateBucket({
                    bucketId: bucket['$id'],
                    name: bucket.name,
                    permissions: bucket['$permissions'],
                    fileSecurity: bucket.fileSecurity,
                    enabled: bucket.enabled,
                    maximumFileSize: bucket.maximumFileSize,
                    allowedFileExtensions: bucket.allowedFileExtensions,
                    compression: bucket.compression,
                    encryption: bucket.encryption,
                    antivirus: bucket.antivirus,
                    parseOutput: false
                })

                success(`Pushed ${bucket.name} ( ${bucket['$id']} )`);
            } else {
                throw e;
            }
        }
    }

    process.exit(0);
}

const pushTeam = async () => {
    let response = {};

    const teamIds = (await inquirer.prompt(questionsPushTeams.slice(0, 2))).teams;
    const configTeams = localConfig.getTeams();
    const teams = [];

    for (const teamId of teamIds) {
        const id = teamId.value ? teamId.value : teamId
        const idTeams = configTeams.filter((t) => t.$id === id);
        teams.push(...idTeams);
    }

    for (let team of teams) {
        log(`Pushing team ${team.name} ( ${team['$id']} )`)

        try {
            response = await teamsGet({
                teamId: team['$id'],
                parseOutput: false,
            })
            log(`Team ${team.name} ( ${team['$id']} ) already exists.`);

            const answers = await inquirer.prompt(questionsPushTeams.slice(2, 4))
            const override = answers.setupoverride ? answers.setupoverride : answers.override.toLowerCase() === "yes";
            if (!override) {
                log(`Skipping ${team.name} ( ${team['$id']} )`);
                continue;
            }

            log(`Updating team ...`)

            await teamsUpdate({
                teamId: team['$id'],
                name: team.name,
                parseOutput: false
            });

            success(`Pushed ${team.name} ( ${team['$id']} )`);
        } catch (e) {
            if (e.code == 404) {
                log(`Team ${team.name} does not exist in the project. Creating ... `);

                response = await teamsCreate({
                    teamId: team['$id'],
                    name: team.name,
                    parseOutput: false
                })

                success(`Pushed ${team.name} ( ${team['$id']} )`);
            } else {
                throw e;
            }
        }
    }

    process.exit(0);
}

const pushMessagingTopic = async () => {
    let response = {};

    const configTopics = localConfig.getMessagingTopics();
    const topicsIds = (await inquirer.prompt(questionsPushMessagingTopics.slice(0, 2))).topics;
    const topics = [];
    let overrideExisting = false;

    for (const topicId of topicsIds) {
        const id = topicId.value ? topicId.value : topicId
        const idTopic = configTopics.filter((b) => b.$id === id);
        topics.push(...idTopic);
    }

    const answers = await inquirer.prompt(questionsPushMessagingTopics.slice(2, 4))
    const override = answers.setupoverride ? answers.setupoverride : answers.override.toLowerCase() === "yes";
    if (override) {
        overrideExisting = true
    }

    for (let topic of topics) {
        log(`Pushing topic ${topic.name} ( ${topic['$id']} )`)

        try {
            response = await messagingGetTopic({
                topicId: topic['$id'],
                parseOutput: false
            })
            log(`Topic ${topic.name} ( ${topic['$id']} ) already exists.`);

            if (!overrideExisting) {
                log(`Skipping ${topic.name} ( ${topic['$id']} )`);
                continue;
            }

            log(`Updating Topic ...`)

            await messagingUpdateTopic({
                topicId: topic['$id'],
                name: topic.name,
                subscribe: topic.subscribe,
                parseOutput: false
            });

            success(`Pushed ${topic.name} ( ${topic['$id']} )`);
        } catch (e) {
            if (e.code == 404) {
                log(`Topic ${topic.name} does not exist in the project. Creating ... `);

                response = await messagingCreateTopic({
                    topicId: topic['$id'],
                    name: topic.name,
                    subscribe: topic.subscribe,
                    parseOutput: false
                })

                success(`Created ${topic.name} ( ${topic['$id']} )`);
            } else {
                throw e;
            }
        }
    }

    process.exit(0);
}

const push = new Command("push")
    .description(commandDescriptions['push'])
    .action(actionRunner(pushResources));

push
    .command("function")
    .description("Push functions in the current directory.")
    .option(`--functionId <functionId>`, `Function ID`)
    .option(`--async`, `Don't wait for functions deployments status`)
    .action(actionRunner(pushFunction));

push
    .command("collection")
    .description("Push collections in the current project.")
    .action(actionRunner(pushCollection));

push
    .command("bucket")
    .description("Push buckets in the current project.")
    .action(actionRunner(pushBucket));

push
    .command("team")
    .description("Push teams in the current project.")
    .action(actionRunner(pushTeam));

push
    .command("topic")
    .description("Push messaging topics in the current project.")
    .action(actionRunner(pushMessagingTopic));

module.exports = {
    push
}
