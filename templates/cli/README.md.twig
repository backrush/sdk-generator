# {{ spec.title }} {{sdk.name}} SDK

![License](https://img.shields.io/github/license/{{ sdk.gitUserName|url_encode }}/{{ sdk.gitRepoName|url_encode }}.svg?v=1)
![Version](https://img.shields.io/badge/api%20version-{{ spec.version|url_encode }}-blue.svg?v=1)
{% if sdk.warning %}

{{ sdk.warning }}
{% endif %}

{{ sdk.description }}

{% if sdk.logo %}
![{{ spec.title }}]({{ sdk.logo }})
{% endif %}

## Installation

This tutorial assumes that you have docker setup and running on your machine. 

You can install the CLI by getting our installation script.

### Linux / MacOS 
```bash
$ wget -q https://appwrite.io/cli/install.sh  -O - | /bin/bash  
```

### Windows
```powershell
$ iwr -useb https://appwrite.io/cli/install.ps1 | iex
```

## Initialisation 
The CLI needs to be initialised with your project settings. This can be done using 
```sh
$ {{ language.params.executableName }} init 
```

The CLI requires an endpoint, project ID, API key and a locale to be able to communicate with the Appwrite backend server. There are two ways to achieve this 

### 1. Environment file 
```sh
$ {{ language.params.executableName }} --env-file path/to/your/environment/file init     
```
The .env file must have the following keys 
```sh
endpoint=http://192.168.1.6/v1
X-Appwrite-Project=5ff450422d42f
X-Appwrite-Key=0773c7...a2672a
X-Appwrite-Locale=en-US
```

### 2. Using the prompt

Invoking `{{ language.params.executableName }} init` without an env file triggers an interactive prompt where you can manually enter the details. These values are saved locally so that you dont have to re-enter them everytime. 

## Usage 

The Appwrite CLI follows the following general syntax.
```sh
$ {{ language.params.executableName }} [SERVICE] [COMMAND] --[OPTIONS]
```

A few sample commands to get you started 

```sh
$ {{ language.params.executableName }} users create --email="hello@appwrite.io" --password="very_strong_password"
$ {{ language.params.executableName }} users list 
```

To get information about the different services available, you can use 
```sh
$ {{ language.params.executableName }} help
```

To get information about a particular service and the commands available in a service you can use 
```sh
$ {{ language.params.executableName }} users help
$ {{ language.params.executableName }} accounts help
```

To get information about a particular command and the parameters it accepts, you can use

```sh
$ {{ language.params.executableName }} users list --help
$ {{ language.params.executableName }} account get --help 
```

## Contribution

This library is auto-generated by Appwrite custom [SDK Generator](https://github.com/appwrite/sdk-generator). To learn more about how you can help us improve this SDK, please check the [contribution guide](https://github.com/appwrite/sdk-generator/blob/master/CONTRIBUTING.md) before sending a pull-request.

## License

Please see the [{{spec.licenseName}} license]({{spec.licenseURL}}) file for more information.