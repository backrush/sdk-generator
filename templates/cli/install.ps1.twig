## <script src="/dist/scripts/cli-powershell.js"></script>
## <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.16.0/themes/prism-okaidia.min.css" rel="stylesheet" />
## <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.16.0/components/prism-core.min.js" data-manual></script>
## <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.16.0/components/prism-powershell.min.js"></script>
## <style>body {color: #272822; background-color: #272822; font-size: 0.8em;} </style>
# Love open-source, dev-tooling and passionate about code as much as we do?
# ---
# We're always looking for awesome hackers like you to join our 100% remote team!
# Check and see if you find any relevant position @ https://{{ spec.title | lower }}.io/company/careers
# (and let us know you found this message...)

# This script contains hidden JS code to allow better readability and syntax highlighting
# You can use "View source" of this page to see the full script.

# {{ spec.title | caseUcfirst }} CLI location
${{ spec.title | upper }}_INSTALL_DIR = Join-Path -Path $env:LOCALAPPDATA -ChildPath "{{ spec.title | caseUcfirst }}"

# {{ spec.title | caseUcfirst }} CLI Executable name 
${{ spec.title | upper }}_EXECUTABLE_NAME = "{{ language.params.executableName }}.ps1"

# {{ spec.title | caseUcfirst }} executable file path 
${{ spec.title | upper }}_EXECUTABLE_FILEPATH = Join-Path -Path ${{ spec.title | upper }}_INSTALL_DIR -ChildPath ${{ spec.title | upper }}_EXECUTABLE_NAME

# {{ spec.title | caseUcfirst }} CLI image name
${{ spec.title | upper }}_CLI_IMAGE_NAME = "{{ spec.title | lower }}/cli"

# {{ spec.title | caseUcfirst }} CLI image version 
${{ spec.title | upper }}_CLI_IMAGE_VERSION = "{{ sdk.version }}"

${{ spec.title | upper }}_EXECUTABLE_CONTENT = @"
`$allowList = 'version', 'help', 'init', 'client' {% for service in spec.services %}, '{{ service.name }}'{% endfor %}

if ( `$args.count -eq 0 ) {
    `$args += 'help'
}

if ( -not (`$allowList -contains `$args[0])) {
    Write-Host "Looks like a crazy hamster flipped a bit.`n`nUse {{ language.params.executableName }} help for a list of supported commands."
    exit 1
}

docker run -i --rm --volume {{ spec.title | lower }}-cli:/usr/local/code/app/.preferences/ --volume `$pwd``:/usr/local/code/files:rw  ${{ spec.title | upper }}_CLI_IMAGE_NAME`:${{ spec.title | upper }}_CLI_IMAGE_VERSION (`$args | % {[uri]::EscapeUriString(`$_)})
"@

$USER_PATH_ENV_VAR = [Environment]::GetEnvironmentVariable("PATH", "User")

function Greeting {
    Write-Host @"{{ language.params.logo | raw }}
"@ -ForegroundColor red
    Write-Host "Welcome to the {{ spec.title | caseUcfirst }} CLI install shield."
    
}

function CheckSystemInfo {
    Write-Host "[1/4] Getting System Info ..."
    if ((Get-ExecutionPolicy) -gt 'RemoteSigned' -or (Get-ExecutionPolicy) -eq 'ByPass') {
        Write-Host "PowerShell requires an execution policy of 'RemoteSigned'."
        Write-Host "To make this change please run:"
        Write-Host "'Set-ExecutionPolicy RemoteSigned -scope CurrentUser'"
        break
    }
}

function PerformChecks {

    Write-Host "[2/4] Performing Checks ..."

    if (!(docker --version)) {
        throw "Docker could not be found. Please install docker for your OS from https://docs.docker.com/get-docker/ and try again."
    }

    if (!(docker ps)) {
        throw "The docker daemon is not operational. Make sure that docker is running and try again."
    }
}

function Install {
    Write-Host "[3/4] Starting installation ..."

    $out = (Invoke-Expression "docker pull ${{ spec.title | upper }}_CLI_IMAGE_NAME`:${{ spec.title | upper }}_CLI_IMAGE_VERSION") | Out-String

    if ($out -NotMatch "Image is up to date|Downloaded newer image") {
        throw "Failed to fetch docker image. Exiting ..."
    }

    [void](New-Item -Path ${{ spec.title | upper }}_EXECUTABLE_FILEPATH -Value ${{ spec.title | upper }}_EXECUTABLE_CONTENT -ItemType File -Force)

    if ($USER_PATH_ENV_VAR -like '*{{ spec.title | caseUcfirst }}*') {
        Write-Host "Skipping to add {{ spec.title | caseUcfirst }} to User Path."
    }
    else {
        [System.Environment]::SetEnvironmentVariable("PATH", $USER_PATH_ENV_VAR + ";${{ spec.title | upper }}_INSTALL_DIR", "User")
    }
}

function CleanUp {
    Write-Host "Cleaning up mess ..."
}

function InstallCompleted {
    Write-Host "[4/4] Finishing Installation ... "
    cleanup
    Write-Host "ðŸ¤˜ May the force be with you."
    Write-Host "To get started with {{ spec.title | caseUcfirst }} CLI, please visit https://{{ spec.title | lower }}.io/docs/command-line"
}

Greeting
CheckSystemInfo
PerformChecks
Install
InstallCompleted
