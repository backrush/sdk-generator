<?php

namespace {{ spec.title | caseUcfirst }}\Services;

require_once './vendor/autoload.php';

use Exception;
use Utopia\CLI\CLI;
use Utopia\Validator\Mock;
use Utopia\CLI\Console;

const USER_PREFERENCES_FILE = __DIR__."/../../.preferences/.prefs.json";
const PREFERENCE_ENDPOINT = "endpoint";

/**
 * Default User Preferences
 *
 * @var array
 */
$preferences = [
    PREFERENCE_ENDPOINT => '',
{% for header in spec.global.headers %}
{% if header.key != 'Mode' %}
    '{{header.name}}' => '',
{% endif %}
{% endfor %}
];


/**
 * Function to load user preferences from
 * environment variables
 */
function loadEnvVariables(): bool
{
    try {
        
        $endpoint = getenv(PREFERENCE_ENDPOINT) ?: '';
        setPreference(PREFERENCE_ENDPOINT, $endpoint);

{% for header in spec.global.headers %}
{% if header.key != 'Mode' %}
        ${{ header.key | caseCamel }} = getenv('{{ header.name}}') ?: '';
        setPreference('{{ header.name }}', ${{ header.key | caseCamel }});

{% endif %}
{% endfor %}

        if (!isPreferenceLoaded()) {
            return false;
        }

        $result = savePreferences();
        if ($result === false) {
            return false;
        } else {
            Console::success('✅ Preferences saved successfully');
        }
        
    } catch (Exception $e) {
        return false;
    }

    return true;
}

function isPreferenceLoaded() : bool {
    if(empty(getPreference(PREFERENCE_ENDPOINT))) return false;
{% for header in spec.global.headers %}
{% if header.key != 'Mode' %}
    if(empty(getPreference('{{header.name}}'))) return false;
{% endif %}
{% endfor %}
    return true;
}

/**
 * Function to write user preferences to
 * the JSON file
 * 
 * @return int
 */
function savePreferences(string $filename = USER_PREFERENCES_FILE): int
{
    global $preferences;
    $jsondata = json_encode($preferences, JSON_PRETTY_PRINT);
    $result = file_put_contents($filename, $jsondata);
    return $result;
}

function getPreference(string $key): string
{
    global $preferences;
    return $preferences[$key] ?? '';
}

function setPreference(string $key , string $value) 
{
    global $preferences;
    $preferences[$key] = $value;
}

function promptUser()
{
    Console::info("🟢 Starting prompt\n");

    if(empty(getPreference(PREFERENCE_ENDPOINT))) {
        $endpoint = Console::confirm('🟢 Choose your API Endpoint: ( default: http://localhost/v1 )');
        setPreference(PREFERENCE_ENDPOINT, empty($endpoint) ? 'http://localhost/v1' : $endpoint);
    }

    if(empty(getPreference('X-Appwrite-Project'))) {
        $project = Console::confirm('🟢 Enter your project from the {{ spec.title | caseUcfirst }} console: ');
        if (empty($project)) {
            Console::error("❌ You cannot continue without a project. Exiting...");
            exit();
        } 
        setPreference('X-Appwrite-Project', $project);
    }

    if(empty(getPreference('X-Appwrite-Key'))) {
        $key = Console::confirm('🟢 Enter your key from the {{ spec.title | caseUcfirst }} console: ');
        if (empty($key)) {
            Console::error("❌ You cannot continue without a key. Exiting...");
            exit();
        } 
        setPreference('X-Appwrite-Key', $key);
    }

    if(empty(getPreference('X-Appwrite-Locale'))) {
        $locale = Console::confirm('🟢 Enter your locale: : ( default: en-US )');
        setPreference('X-Appwrite-Locale', empty($locale) ? 'en-US' : $locale );
    }
    
    $result = savePreferences();
    if ($result === false) {
        throw new Exception('❌ Could not save preferences.');
    } else {
        Console::success('✅ Preferences saved successfully');
    }
}

$cli = new CLI();

$cli->
      init(function() use ($cli) {
        
        if (array_key_exists('help', $cli->getArgs())) {
            $taskName = $cli->match()->getName();
            $task = $cli->getTasks()[$taskName];
            $description = $task->getLabel('description', '');
            $params = $task->getParams();

            Console::log("\e[0;31;m
   _                            _ _       
  /_\  _ __  _ ____      ___ __(_) |_ ___ 
 //_\\| '_ \| '_ \ \ /\ / / '__| | __/ _ \
/  _  \ |_) | |_) \ V  V /| |  | | ||  __/
\_/ \_/ .__/| .__/ \_/\_/ |_|  |_|\__\___|
      |_|   |_|                           
      
      \e[0m") ;

            printf("\nUsage : {{ language.params.executableName }} {$taskName} --[OPTIONS] \n\n");
            printf($description);
            printf("Options:\n");
            $mask = "\t%-20.20s %-125.125s\n";

            foreach ($params as $key => $value) {
                if ($key !== 'help')
                    printf($mask, $key, $value['description']);
            }
            Console::exit(0);
        }
      });

$cli
    ->task('init')
    ->label('description', "The init command is used to initialise your CLI\n\n")
    ->param('endpoint', '', new Mock(), 'Your {{ spec.title | caseUcfirst }} endpoint', true)
{% for header in spec.global.headers %}
    ->param('{{ header.key | lower }}', '', new Mock(), '{{ header.description }}', true)
{% endfor %}
    ->action(function( $endpoint, {% for header in spec.global.headers %} ${{ header.key | lower }}{% if not loop.last %},{% endif %}{% endfor %} ) {
        /* Check if enviroment variables exist
        * Else prompt the user
        */
        
        putenv("endpoint=$endpoint");
{% for header in spec.global.headers %}
        putenv("{{ header.name }}=${{ header.key | lower }}");
{% endfor %}

        if (!loadEnvVariables()) {
            promptUser();
        }
});

$cli->run();
