<?php

namespace {{ spec.title | caseUcfirst }}\Services;

require_once './vendor/autoload.php';

use {{ spec.title | caseUcfirst }}\Client;
use {{ spec.title | caseUcfirst }}\Parser;
use Utopia\CLI\CLI;
use Utopia\CLI\Console;
use Utopia\Validator\Mock;

$parser = new Parser();

$cli = new CLI();

{% for method in service.methods %}
$cli
    ->task('{{ method.name | caseCamel }}')
    ->param('help', null, new Mock(), 'Provide documentation about a command', true)
{% for parameter in method.parameters.all %}
    ->param('{{ parameter.name }}', {{ parameter | paramDefault }} , new Mock(), '{{ parameter.description}}', {% if not parameter.required %} true{% else %} false{% endif %})
{% endfor %}
    ->action(function ( $help {% for parameter in method.parameters.all %}, ${{ parameter.name}} {% endfor %}) use ($parser) {
        if($help !== null) {
                printf("
   _                            _ _       
  /_\  _ __  _ ____      ___ __(_) |_ ___ 
 //_\\| '_ \| '_ \ \ /\ / / '__| | __/ _ \
/  _  \ |_) | |_) \ V  V /| |  | | ||  __/
\_/ \_/ .__/| .__/ \_/\_/ |_|  |_|\__\___|
      |_|   |_|                           
      
      ");
                printf("\nUsage : appwrite {{ service.name }} {{ method.name }} {% if method.parameters.all is not empty %}--[OPTIONS]{% endif %} \n\n");
                printf("{{ method.description | raw }}\n\n");
{% if method.parameters.all is not empty %}
                printf("Options:\n");
{% endif %}
                $mask = "\t%-20.20s %-125.125s\n";
{% for parameter in method.parameters.all %}
                printf($mask, "{{ parameter.name }}", "{{ parameter.description }}");
{% endfor %}
                return;
        }
        $client = new Client();
        $path   = str_replace([{% for parameter in method.parameters.path %}'{{ '{' }}{{ parameter.name | caseCamel }}{{ '}' }}'{% if not loop.last %}, {% endif %}{% endfor %}], [{% for parameter in method.parameters.path %}${{ parameter.name | caseCamel }}{% if not loop.last %}, {% endif %}{% endfor %}], '{{ method.path }}');
        $params = [];

{% for parameter in method.parameters.query %}
        $params['{{ parameter.name }}'] = ${{ parameter.name | caseCamel }};
{% endfor %}
{% for parameter in method.parameters.body %}
        $params['{{ parameter.name }}'] = ${{ parameter.name | caseCamel }};
{% endfor %}
{% for parameter in method.parameters.formData %}
        $params['{{ parameter.name }}'] = ${{ parameter.name | caseCamel }};
{% endfor %}

        $response =  $client->call(Client::METHOD_{{ method.method | caseUpper }}, $path, [
{% for parameter in method.parameters.header %}
            '{{ parameter.name }}' => ${{ parameter.name | caseCamel }},
{% endfor %}
{% for key, header in method.headers %}
            '{{ key }}' => '{{ header }}',
{% endfor %}
        ], $params);

        $parser->parseResponse($response);
    });

{% endfor %}

$cli
    ->task('help')
    ->action(function() {
        printf("
   _                            _ _       
  /_\  _ __  _ ____      ___ __(_) |_ ___ 
 //_\\| '_ \| '_ \ \ /\ / / '__| | __/ _ \
/  _  \ |_) | |_) \ V  V /| |  | | ||  __/
\_/ \_/ .__/| .__/ \_/\_/ |_|  |_|\__\___|
      |_|   |_|                           
      
      ");
        printf("\nUsage : appwrite {{ service.name }} [COMMAND]\n\n");
        printf("Commands :\n");
        $mask = "\t%-20.20s %-125.125s\n";
{% for method in service.methods %}
        printf($mask, "{{ method.name | caseCamel }}", "{{ method.description | raw }}");
{% endfor %}
        printf("\nRun 'appwrite {{ service.name }} COMMAND --help' for more information on a command.\n");
    });


$cli->run();