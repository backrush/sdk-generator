<?php

namespace {{ spec.title | caseUcfirst }}\Services;

require_once './vendor/autoload.php';

use Exception;
use {{ spec.title | caseUcfirst }}\Client;
use {{ spec.title | caseUcfirst }}\Parser;
use Utopia\CLI\CLI;
use Utopia\CLI\Console;
use Utopia\Validator\Mock;

$parser = new Parser();

$cli = new CLI();

$cli->
      init(function() use ($cli) {
        
        if (array_key_exists('help', $cli->getArgs())) {
            $taskName = $cli->match()->getName();
            $task = $cli->getTasks()[$taskName];
            $description = $task->getLabel('description', '');
            $params = $task->getParams();

            echo "\e[0;31;m
   _                            _ _       
  /_\  _ __  _ ____      ___ __(_) |_ ___ 
 //_\\| '_ \| '_ \ \ /\ / / '__| | __/ _ \
/  _  \ |_) | |_) \ V  V /| |  | | ||  __/
\_/ \_/ .__/| .__/ \_/\_/ |_|  |_|\__\___|
      |_|   |_|                           
      
      \e[0m" ;

            printf("\nUsage : appwrite {{ service.name }} {$taskName} --[OPTIONS] \n\n");
            printf($description);
            printf("Options:\n");
            $mask = "\t%-20.20s %-125.125s\n";

            foreach ($params as $key => $value) {
                if ($key !== 'help')
                    printf($mask, $key, $value['description']);
            }
            Console::exit(0);
        }
      });

{% for method in service.methods %}
$cli
    ->task('{{ method.name | caseCamel }}')
    ->label('description', "{{ method.description | raw }}\n\n")
{% for parameter in method.parameters.all %}
    ->param('{{ parameter.name }}', {{ parameter | paramDefault }} , new Mock(), '{{ parameter.description}}', {% if not parameter.required %} true{% else %} false{% endif %})
{% endfor %}
    ->action(function ({% for parameter in method.parameters.all %} ${{ parameter.name}}{% if not loop.last %},{% endif %}{% endfor %} ) use ($parser) {
        $client = new Client();
        $path   = str_replace([{% for parameter in method.parameters.path %}'{{ '{' }}{{ parameter.name | caseCamel }}{{ '}' }}'{% if not loop.last %}, {% endif %}{% endfor %}], [{% for parameter in method.parameters.path %}${{ parameter.name | caseCamel }}{% if not loop.last %}, {% endif %}{% endfor %}], '{{ method.path }}');
        $params = [];

{% for parameter in method.parameters.query %}
        $params['{{ parameter.name }}'] = ${{ parameter.name | caseCamel }};
{% endfor %}

{% for parameter in method.parameters.body %}
{% if parameter.type == 'file' %}
        if (file_exists(${{ parameter.name | caseCamel }}) === false ) {
            throw new Exception('File not found...'); 
        }
        $cFile = new \CURLFile(${{ parameter.name | caseCamel }}, 'image/png', basename(${{ parameter.name | caseCamel }}));
        $params['{{ parameter.name }}'] = $cFile;
{% else %} 
        $params['{{ parameter.name }}'] = ${{ parameter.name | caseCamel }};
{% endif %}
{% endfor %}

{% for parameter in method.parameters.formData %}
        $params['{{ parameter.name }}'] = ${{ parameter.name | caseCamel }};
{% endfor %}

        $response =  $client->call(Client::METHOD_{{ method.method | caseUpper }}, $path, [
{% for parameter in method.parameters.header %}
            '{{ parameter.name }}' => ${{ parameter.name | caseCamel }},
{% endfor %}
{% for key, header in method.headers %}
            '{{ key }}' => '{{ header }}',
{% endfor %}
        ], $params);

        $parser->parseResponse($response);
    });

{% endfor %}

$cli
    ->task('help')
    ->action(function() {
        echo "\e[0;31;m
   _                            _ _       
  /_\  _ __  _ ____      ___ __(_) |_ ___ 
 //_\\| '_ \| '_ \ \ /\ / / '__| | __/ _ \
/  _  \ |_) | |_) \ V  V /| |  | | ||  __/
\_/ \_/ .__/| .__/ \_/\_/ |_|  |_|\__\___|
      |_|   |_|                           
      
      \e[0m" ;
        printf("\nUsage : appwrite {{ service.name }} [COMMAND]\n\n");
        printf("Commands :\n");
        $mask = "\t%-20.20s %-125.125s\n";
{% for method in service.methods %}
        printf($mask, "{{ method.name | caseCamel }}", "{{ method.description | raw }}");
{% endfor %}
        printf("\nRun 'appwrite {{ service.name }} COMMAND --help' for more information on a command.\n");
    });


$cli->run();