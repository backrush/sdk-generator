{% macro sub_schema(property) %}{% if property.sub_schema %}{% if property.type == 'array' %}List<{{property.sub_schema | caseUcfirst | overrideIdentifier}}>{% else %}{{property.sub_schema | caseUcfirst | overrideIdentifier}}{% endif %}{% else %}{{property.type | typeName}}{% endif %}{% if not property.required %}?{% endif %}{% endmacro %}
{% macro property_name(definition, property) %}{{ property.name | caseUcfirst | removeDollarSign | escapeKeyword}}{% endmacro %}

using System;
using System.Linq;
using System.Collections.Generic;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace {{ spec.title | caseUcfirst }}.Models
{
    public class {{ definition.name | caseUcfirst | overrideIdentifier }}
    {
{% for property in definition.properties %}
        [JsonProperty("{{ property.name }}")]
        public {{ _self.sub_schema(property) }} {{ _self.property_name(definition, property) }} { get; set; }

{% endfor %}
{% if definition.additionalProperties %}
        public Dictionary<string, object> Data { get; set; }
{% endif %}

        public {{ definition.name | caseUcfirst | overrideIdentifier }}(
{% for property in definition.properties %}
            {{ _self.sub_schema(property) }} {{ property.name | caseCamel | escapeKeyword }}{% if not property.required %} = {{ property.default }}{% endif %}{% if not loop.last or (loop.last and definition.additionalProperties) %},{% endif %}

{% endfor %}
{% if definition.additionalProperties %}
            Dictionary<string, object> data
{% endif %}
        ) {
{% for property in definition.properties %}
            {{ _self.property_name(definition, property) }} = {{ property.name | caseCamel | escapeKeyword }};
{% endfor %}
{% if definition.additionalProperties %}
            Data = data;
{% endif %}
        }

        public static {{ definition.name | caseUcfirst | overrideIdentifier}} From(Dictionary<string, object> map) => new {{ definition.name | caseUcfirst | overrideIdentifier }}(
{% for property in definition.properties %}
            {{ property.name | caseCamel | escapeKeyword | removeDollarSign }}: {% if property.sub_schema %}{% if property.type == 'array' %}((JArray)map["{{ property.name }}"]).ToObject<List<{{property.sub_schema | caseUcfirst | overrideIdentifier}}>>()!{% else %}{{property.sub_schema | caseUcfirst | overrideIdentifier}}.From(map: ((JObject)map["{{ property.name }}"]).ToObject<Dictionary<string, object>>()!){% endif %}{% else %}({{ property.type | typeName }})map["{{ property.name }}"]{% endif %}{% if not loop.last or (loop.last and definition.additionalProperties) %},{% endif %}

{% endfor %}
{% if definition.additionalProperties %}
            data: map.ContainsKey("data")
                ? ((JObject)map["data"]).ToObject<Dictionary<string, object>>()!
                : new Dictionary<string, object>()
{% endif %}
        );

        public Dictionary<string, object> ToMap() => new Dictionary<string, object>()
        {
{% for property in definition.properties %}
            { "{{ property.name }}", {% if property.sub_schema %}{% if property.type == 'array' %}{{ _self.property_name(definition, property) }}.Select(it => it.ToMap()){% else %}{{ _self.property_name(definition, property) }}.ToMap(){% endif %}{% else %}{{ _self.property_name(definition, property) }}{% endif %}{{ ' }' }}{% if not loop.last or (loop.last and definition.additionalProperties) %},{% endif %}

{% endfor %}
{% if definition.additionalProperties %}
            { "data", Data }
{% endif %}
        };
{% if definition.additionalProperties %}

        public T ConvertTo<T>(Func<Dictionary<string, object>, T> fromJson) =>
            fromJson.Invoke(Data);
{% endif %}
{% for property in definition.properties %}
{% if property.sub_schema %}
{% for def in spec.definitions %}
{% if def.name == property.sub_schema and def.additionalProperties and property.type == 'array' %}

        public T ConvertTo<T>(Func<Dictionary<string, object>, T> fromJson) =>
            (T){{ property.name | caseUcfirst | escapeKeyword }}.Select(it => it.ConvertTo(fromJson));

{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
    }
}