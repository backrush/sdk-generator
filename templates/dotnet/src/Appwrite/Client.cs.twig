using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

namespace {{ spec.title | caseUcfirst }}
{
    public class Client
    {
        public string EndPoint => _endPoint;
        public Dictionary<string, string> Config => _config;

        private HttpClient _http;
        private readonly Dictionary<string, string> _headers;
        private readonly Dictionary<string, string> _config;
        private string _endPoint;

        private static int ChunkSize = 5 * 1024 * 1024;

        public static JsonSerializerSettings DeserializerSettings { get; set; } = new JsonSerializerSettings {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            NullValueHandling = NullValueHandling.Ignore,
            ContractResolver = new CamelCasePropertyNamesContractResolver(),
            Converters = new List<JsonConverter> {
                new StringEnumConverter()
            }
        };

        public static JsonSerializerSettings SerializerSettings { get; set; } = new JsonSerializerSettings
        {
            NullValueHandling = NullValueHandling.Ignore,
            ContractResolver = new CamelCasePropertyNamesContractResolver(),
            Converters = new List<JsonConverter> {
                new StringEnumConverter()
            }
        };

        public Client(
            string endPoint = "https://appwrite.io/v1",
            bool selfSigned = false,
            HttpClient? http = null)
        {
            _endPoint = endPoint;
            _http = http ?? new HttpClient();
            _headers = new Dictionary<string, string>()
            {
                { "content-type", "application/json" },
                { "x-sdk-version", "{{spec.title | caseDash}}:{{ language.name | caseLower }}:{{sdk.version}}" }{% if spec.global.defaultHeaders | length > 0 %},{% endif %}

{% for key,header in spec.global.defaultHeaders %}
                { "{{key}}", "{{header}}" }{% if not loop.last %},{% endif %}
{% endfor %}

            };
            _config = new Dictionary<string, string>();

            if (selfSigned)
            {
                SetSelfSigned(true);
            }

            JsonConvert.DefaultSettings = () => DeserializerSettings;
        }

        public Client SetSelfSigned(bool selfSigned)
        {
            var handler = new HttpClientHandler()
            {
                ServerCertificateCustomValidationCallback = (request, cert, chain, errors) => true
            };

            _http = selfSigned
                ? new HttpClient(handler)
                : new HttpClient();

            return this;
        }

        public Client SetEndPoint(string endPoint)
        {
            _endPoint = endPoint;

            return this;
        }

{% for header in spec.global.headers %}
{% if header.description %}
        /// <summary>{{header.description}}</summary>
{% endif %}
        public Client Set{{header.key | caseUcfirst}}(string value) {
            _config.Add("{{ header.key | caseCamel }}", value);
            AddHeader("{{header.name}}", value);

            return this;
        }

{% endfor %}
        public Client AddHeader(string key, string value)
        {
            _headers.Add(key, value);

            return this;
        }

        public Task Call(
            string method,
            string path,
            Dictionary<string, string> headers,
            Dictionary<string, object> parameters)
        {
            return Call<object>(method, path, headers, parameters);
        }

        public async Task<T> Call<T>(
            string method,
            string path,
            Dictionary<string, string> headers,
            Dictionary<string, object> parameters,
            Func<Dictionary<string, object>, T>? convert = null) where T : class
        {
            var methodGet = "GET".Equals(method, StringComparison.OrdinalIgnoreCase);

            var queryString = methodGet ?
                "?" + parameters.ToQueryString() :
                string.Empty;

            var request = new HttpRequestMessage(
                new HttpMethod(method),
                _endPoint + path + queryString);

            if ("multipart/form-data".Equals(
                headers["content-type"],
                StringComparison.OrdinalIgnoreCase))
            {
                var form = new MultipartFormDataContent();

                foreach (var parameter in parameters)
                {
                    if (parameter.Key == "file")
                    {
                        var fi = (FileInfo)parameters["file"];
                        var file = File.ReadAllBytes(fi.FullName);

                        form.Add(new ByteArrayContent(file, 0, file.Length), "file", fi.Name);
                    }
                    else if (parameter.Value is IEnumerable<object> enumerable)
                    {
                        var list = new List<object>(enumerable);
                        for (int index = 0; index < list.Count; index++)
                        {
                            form.Add(new StringContent(list[index].ToString()!), $"{parameter.Key}[{index}]");
                        }
                    }
                    else
                    {
                        form.Add(new StringContent(parameter.Value.ToString()!), parameter.Key);
                    }
                }
                request.Content = form;

            }
            else if (!methodGet)
            {
                string body = parameters.ToJson();

                request.Content = new StringContent(body, Encoding.UTF8, "application/json");
            }

            foreach (var header in _headers)
            {
                if (header.Key.Equals("content-type", StringComparison.OrdinalIgnoreCase))
                {
                    _http.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(header.Value));
                }
                else
                {
                    if (_http.DefaultRequestHeaders.Contains(header.Key)) {
                        _http.DefaultRequestHeaders.Remove(header.Key);
                    }
                    _http.DefaultRequestHeaders.Add(header.Key, header.Value);
                }
            }

            foreach (var header in headers)
            {
                if (header.Key.Equals("content-type", StringComparison.OrdinalIgnoreCase))
                {
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(header.Value));
                }
                else
                {
                    if (request.Headers.Contains(header.Key)) {
                        request.Headers.Remove(header.Key);
                    }
                    request.Headers.Add(header.Key, header.Value);
                }
            }
            try
            {
                var response = await _http.SendAsync(request);
                var code = (int)response.StatusCode;
                var contentType = response.Content.Headers
                    .GetValues("Content-Type")
                    .FirstOrDefault() ?? string.Empty;

                var isJson = contentType.Contains("application/json");
                var isBytes = contentType.Contains("application/octet-stream");

                if (code >= 400) {
                    var message = await response.Content.ReadAsStringAsync();

                    if (isJson) {
                        message = JObject.Parse(message)["message"]!.ToString();
                    }

                    throw new {{spec.title | caseUcfirst}}Exception(message, code);
                }

                if (isJson)
                {
                    var responseString = await response.Content.ReadAsStringAsync();

                    var dict = JsonConvert.DeserializeObject<Dictionary<string, object>>(
                        responseString,
                        DeserializerSettings);

                    if (convert != null)
                    {
                        return convert(dict!);
                    }

                    return (dict as T)!;
                }
                else if (isBytes)
                {
                    return ((await response.Content.ReadAsByteArrayAsync()) as T)!;
                }
                else
                {
                    return default!;
                }
            }
            catch (System.Exception e)
            {
                throw new {{spec.title | caseUcfirst}}Exception(e.Message, e);
            }
        }

        public async Task<T> ChunkedUpload(
            string path,
            Dictionary<string, string> headers,
            Dictionary<string, object> parameters,
            Func<Dictionary<string, object>, T>? converter,
            string paramName,
            string? idParamName = null,
            Action<UploadProgress>? onProgress = null) where T : class
        {
            var file = parameters[paramName] as FileInfo
            var size = file.Length
            var offset = 0;
            var input = file.OpenRead();
            var buffer = new byte[ChunkSize];
            var result = new Dictionary<string, object>();

            if (size < ChunkSize) {
                await input.ReadAsync(buffer, 0, (int)size);
                var content = new MultipartFormDataContent();
                content.Add(new ByteArrayContent(buffer), paramName, file.Name);
                parameters[paramName] = content;
                return await Call<T>(
                    method: "POST",
                    path,
                    headers,
                    parameters,
                    converter
                )
            }

            if (idParamName?.IsNullOrEmpty() && parameters[idParamName] != "unique()") {
                // Make a request to check if a file already exists
                var current = await Call<Dictionary<string, object>>(
                    method: "GET",
                    path: "$path/${params[idParamName]}",
                    headers,
                    parameters = new Dictionary<string, object>()
                )
                var chunksUploaded = (long)current["chunksUploaded"]
                offset = Math.Min((chunksUploaded * ChunkSize), size)
            }

            while (offset < size) {
                input.Seek(offset, SeekOrigin.Begin);

                await input.ReadAsync(buffer, 0, ChunkSize);

                var content = new MultipartFormDataContent();
                content.Add(new ByteArrayContent(buffer), paramName, file.Name);

                parameters[paramName] = content;

                headers["Content-Range"] =
                    $"bytes {offset}-{Math.Min(((offset + CHUNK_SIZE) - 1), size)}/{size}";

                result = Call<Dictionary<string, object>>(
                    method: "POST",
                    path,
                    headers,
                    parameters
                )

                offset += ChunkSize
                headers["x-appwrite-id"] = result["$id"].ToString()

                onProgress?.Invoke(
                    UploadProgress(
                        id = result["$id"].ToString(),
                        progress = Math.Min(offset, size) / size * 100,
                        sizeUploaded = Math.Min(offset, size),
                        chunksTotal = long.Parse(result["chunksTotal"].ToString()),
                        chunksUploaded = long.Parse(["chunksUploaded"].ToString())))
            }

            return converter(result);
        }
    }
}
