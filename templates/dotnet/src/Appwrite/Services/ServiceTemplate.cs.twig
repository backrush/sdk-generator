{% macro parameter(parameter) %}
{% if parameter.name == 'orderType' %}{{ 'OrderType orderType = OrderType.ASC' }}{% else %}
{{ parameter.type | typeName }}{% if not parameter.required and (parameter.type == 'boolean' or parameter.type == 'integer') %}?{% endif %} {{ parameter.name | caseCamel | escapeKeyword }}{{ parameter | paramDefault }}{% endif %}
{% endmacro %}
{% macro method_parameters(parameters) %}
{% if parameters.all|length > 0 %}{% for parameter in parameters.all %}{{ _self.parameter(parameter) }}{% if not loop.last %}{{ ', ' }}{% endif %}{% endfor %}{% endif %}
{% endmacro %}
{% macro map_parameter(parameter) %}
{% if parameter.name == 'orderType' %}{{ parameter.name | caseCamel ~ '.ToString()'}}{% else %}
{{ parameter.name | caseCamel | escapeKeyword }}{% endif %}
{% endmacro %}
{% macro methodNeedsSecurityParameters(method) %}
{% if (method.type == "webAuth" or method.type == "location") and method.security|length > 0 %}{{ true }}{% else %}{{false}}{% endif %}
{% endmacro %}
{% macro resultType(namespace, method) %}
{% if method.type == "webAuth" %}void{% elseif method.type == "location" %}byte[]{% elseif not method.responseModel or method.responseModel == 'any' %}object{% else %}{{ namespace }}.Models.{{method.responseModel | caseUcfirst}}{% endif %}
{% endmacro %}

using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Threading.Tasks;

namespace {{ spec.title | caseUcfirst }}
{
    public class {{ service.name | caseUcfirst }} : Service
    {
        public {{ service.name | caseUcfirst }}(Client client) : base(client) { }

{% for method in service.methods %}
{% if method.title %}
        /// <summary>
        /// {{ method.title }}
{% endif %}
{% if method.description %}
        /// <para>
{{ method.description | dotnetComment }}
        /// </para>
{% endif %}
        /// </summary>
        public async Task{% if method.type != "webAuth" %}<{{ _self.resultType(spec.title, method) }}>{% endif %} {{ method.name | caseUcfirst }}({{ _self.method_parameters(method.parameters) }})
        {
            var path = "{{ method.path }}"
{% for parameter in method.parameters.path %}
                .Replace("{{ '{' ~ parameter.name | caseCamel ~ '}' }}", {{ parameter.name | caseCamel | escapeKeyword }})
{% endfor -%};

            var parameters = new Dictionary<string, object>()
            {
{% for parameter in method.parameters.query | merge(method.parameters.body) %}
                { "{{ parameter.name }}", {{ _self.map_parameter(parameter) }} }{% if not loop.last or _self.methodNeedsSecurityParameters(method) %},{% endif %}

{% endfor %}
            };
{% if _self.methodNeedsSecurityParameters(method) %}{% for node in method.security %}
{% for key,header in node|keys %}
            // { "{{header|caseLower}}", _client.GetConfig().get("{{header|caseLower}}") }{% if not loop.last %},{% endif %}

{% endfor %}
{% endfor %}
{% endif %}
{% if method.type == 'location' %}
            return await _client.Call(
                method: "{{ method.method | caseUpper }}",
                path: path,
                headers: headers,
                parameters: parameters,
                responseType: typeof({{ _self.resultType(spec.title, method) }}));
{% else %}

            var headers = new Dictionary<string, string>()
            {
{{ method.headers|map((header, key) => "                { \"#{key}\", \"#{header}\" }")|join(',\n')|raw }}
            };

{% if method.responseModel %}
            Func<Dictionary<string, object>, {{ _self.resultType(spec.title, method) }}> convert = (Dictionary<string, object> it) => {
{% if method.responseModel == 'any' %}
                return it;
{% else %}
                return {{ _self.resultType(spec.title, method) }}.From(map: it);
{% endif %}
            }
{% endif %}

            return await _client.Call(
                method: "{{ method.method | caseUpper }}",
                path: path,
                headers: headers,
                parameters: parameters,
                convert: convert,
                responseType: typeof({{ _self.resultType(spec.title, method) }}));
{% endif %}
        }
{% if not loop.last %}

{% endif %}
{% endfor %}
    };
}