{% macro parameter(parameter) %}
{% if parameter.name == 'orderType' %}{{ 'OrderType orderType = OrderType.ASC' }}{% else %}
{{ parameter.type | typeName }}{% if not parameter.required %}?{% endif %} {{ parameter.name | caseCamel | escapeKeyword }}{% if not parameter.required %} = null{% endif %}{% endif %}
{% endmacro %}
{% macro method_parameters(parameters, consumes) %}
{% if parameters.all|length > 0 %}{% for parameter in parameters.all | filter((param) => not param.isGlobal)  %}{{ _self.parameter(parameter) }}{% if not loop.last %}{{ ', ' }}{% endif %}{% endfor %}{% if 'multipart/form-data' in consumes %},{% endif %}{% endif %}{% if 'multipart/form-data' in consumes %} Action<UploadProgress>? onProgress = null{% endif %}
{% endmacro %}
{% macro map_parameter(parameter) %}
{% if parameter.name == 'orderType' %}{{ parameter.name | caseCamel ~ '.ToString()'}}{% elseif parameter.isGlobal %}{{ parameter.name | caseUcfirst | escapeKeyword }}{% else %}{{ parameter.name | caseCamel | escapeKeyword }}{% endif %}
{% endmacro %}
{% macro methodNeedsSecurityParameters(method) %}
{% if (method.type == "webAuth" or method.type == "location") and method.security|length > 0 %}{{ true }}{% else %}{{false}}{% endif %}
{% endmacro %}
{% macro resultType(namespace, method) %}
{% if method.type == "webAuth" %}bool{% elseif method.type == "location" %}byte[]{% elseif not method.responseModel or method.responseModel == 'any' %}object{% else %}Models.{{method.responseModel | caseUcfirst | overrideIdentifier }}{% endif %}
{% endmacro %}

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using {{ spec.title | caseUcfirst }}.Models;

namespace {{ spec.title | caseUcfirst }}
{
    public class {{ service.name | caseUcfirst }} : Service
    {

{% if service.globalParams | length %}
{% for parameter in service.globalParams %}
        public {{ parameter.type | typeName | overrideIdentifier }}{% if not parameter.required %}?{% endif %} {{ parameter.name | caseUcfirst | escapeKeyword }} { get; set; }

{% endfor %}

        public {{ service.name | caseUcfirst }}(Client client,{% for parameter in service.globalParams %} {{ parameter.type | typeName | overrideIdentifier }}{% if not parameter.required %}?{% endif %} {{ parameter.name | caseCamel | escapeKeyword }}{% if not parameter.required %} = null{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}) : base(client)
        {
{% for parameter in service.globalParams %}
            {{ parameter.name | caseUcfirst | escapeKeyword }} = {{ parameter.name | caseCamel | escapeKeyword }};
{% endfor %}
        }
{% else %}
        public {{ service.name | caseUcfirst }}(Client client) : base(client) { }
{% endif %}

{% for method in service.methods %}
{% if method.title %}
        /// <summary>
        /// {{ method.title }}
{% endif %}
{% if method.description %}
        /// <para>
{{ method.description | dotnetComment }}
        /// </para>
{% endif %}
        /// </summary>
        public Task{% if method.type != "webAuth" %}<{{ _self.resultType(spec.title, method) }}>{% endif %} {{ method.name | caseUcfirst }}({{ _self.method_parameters(method.parameters, method.consumes) }})
        {
            var path = "{{ method.path }}"{% if method.parameters.path | length == 0 %};{% endif %}

{% for parameter in method.parameters.path %}
                .Replace("{{ '{' ~ parameter.name | caseCamel ~ '}' }}", {{ parameter.name | caseCamel | escapeKeyword }}){% if loop.last %};{% endif %}

{% endfor %}

            var parameters = new Dictionary<string, object?>()
            {
{% for parameter in method.parameters.query | merge(method.parameters.body) %}
                { "{{ parameter.name }}", {{ _self.map_parameter(parameter) }} }{% if not loop.last or _self.methodNeedsSecurityParameters(method) %},{% endif %}

{% endfor %}
{% if _self.methodNeedsSecurityParameters(method) %}
{% for node in method.security %}
{% for key,header in node|keys %}
                { "{{header|caseLower}}", _client.Config["{{header|caseLower}}"] }{% if not loop.last or (loop.last and method.headers | length > 0) %},{% endif %}

{% endfor %}
{% endfor %}
{% endif %}
            };

            var headers = new Dictionary<string, string>()
            {
{{ method.headers|map((header, key) => "                { \"#{key}\", \"#{header}\" }")|join(',\n')|raw }}
            };

{% if method.type == 'location' %}
            return _client.Call<byte[]>(
                method: "{{ method.method | caseUpper }}",
                path: path,
                headers: headers,
                parameters: parameters.Where(it => it.Value != null).ToDictionary(it => it.Key, it => it.Value)!);
{% else %}

{% if method.responseModel %}
            static {{ _self.resultType(spec.title, method) }} Convert(Dictionary<string, object> it) =>
{% if method.responseModel == 'any' %}
                it;
{% else %}
                {{ _self.resultType(spec.title, method) }}.From(map: it);
{% endif %}
{% endif %}

{% if 'multipart/form-data' in method.consumes %}
            string? idParamName = {% if method.parameters.all | filter(p => p.isUploadID) | length > 0 %}{% for parameter in method.parameters.all | filter(parameter => parameter.isUploadID) %}"{{ parameter.name }}"{% endfor %}{% else %}null{% endif %};

{% for parameter in method.parameters.all %}
{% if parameter.type == 'file' %}
            var paramName = "{{ parameter.name }}";
{% endif %}
{% endfor %}

            return _client.ChunkedUpload(
                path,
                headers,
                parameters,
{% if method.responseModel %}
                Convert,
{% endif %}
                paramName,
                idParamName,
                onProgress);
{% else %}

            return _client.Call{% if method.type != 'webAuth' %}<{{ _self.resultType(spec.title, method) }}>{% endif %}(
                method: "{{ method.method | caseUpper }}",
                path: path,
                headers: headers,
{% if not method.responseModel %}
                parameters: parameters.Where(it => it.Value != null).ToDictionary(it => it.Key, it => it.Value)!);
{% else %}
                parameters: parameters.Where(it => it.Value != null).ToDictionary(it => it.Key, it => it.Value)!,
                convert: Convert);
{% endif %}
{% endif %}
{% endif %}
        }
{% if not loop.last %}

{% endif %}
{% endfor %}
    }
}