{% import 'dotnet/base/utils.twig' as utils %}

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using {{ spec.title | caseUcfirst }}.Models;

namespace {{ spec.title | caseUcfirst }}
{
    public class {{ service.name | caseUcfirst }} : Service
    {

{% if service.globalParams | length %}
{% for parameter in service.globalParams %}
        public {{ parameter.type | typeName | overrideIdentifier }}{% if not parameter.required %}?{% endif %} {{ parameter.name | caseUcfirst | escapeKeyword }} { get; set; }

{% endfor %}

        public {{ service.name | caseUcfirst }}(Client client,{% for parameter in service.globalParams %} {{ parameter.type | typeName | overrideIdentifier }}{% if not parameter.required %}?{% endif %} {{ parameter.name | caseCamel | escapeKeyword }}{% if not parameter.required %} = null{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}) : base(client)
        {
{% for parameter in service.globalParams %}
            {{ parameter.name | caseUcfirst | escapeKeyword }} = {{ parameter.name | caseCamel | escapeKeyword }};
{% endfor %}
        }
{% else %}
        public {{ service.name | caseUcfirst }}(Client client) : base(client) { }
{% endif %}

{% for method in service.methods %}
{% if method.title %}
        /// <summary>
        /// {{ method.title }}
{% endif %}
{% if method.description %}
        /// <para>
{{ method.description | dotnetComment }}
        /// </para>
{% endif %}
        /// </summary>
        public Task{% if method.type != "webAuth" %}<{{ utils.resultType(spec.title, method) }}>{% endif %} {{ method.name | caseUcfirst }}({{ utils.method_parameters(method.parameters, method.consumes) }})
        {
            var path = "{{ method.path }}"{% if method.parameters.path | length == 0 %};{% endif %}

{{include('dotnet/base/params.twig')}}

{% if method.type == 'location' %}
{{include('dotnet/base/requests/location.twig')}}
{% else %}

{% if method.responseModel %}
            static {{ utils.resultType(spec.title, method) }} Convert(Dictionary<string, object> it) =>
{% if method.responseModel == 'any' %}
                it;
{% else %}
                {{ utils.resultType(spec.title, method) }}.From(map: it);
{% endif %}
{% endif %}

{% if 'multipart/form-data' in method.consumes %}
{{include('dotnet/base/requests/file.twig')}}
{% else %}

{{include('dotnet/base/requests/api.twig')}}
{% endif %}
{% endif %}
        }
{% if not loop.last %}

{% endif %}
{% endfor %}
    }
}