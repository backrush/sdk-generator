using System;
using System.IO;

using Appwrite.Extensions;

namespace {{ spec.title | caseUcfirst }}.Models
{
    public class Payload
    {
        public string Path { get; set; }
        public string Filename { get; set; }
        public string MimeType { get; set; }
        public string SourceType { get; set; }
        public object Data { get; set; }

        public static Payload FromPath(string path) => new Payload
        {
            Path = path,
            Filename = System.IO.Path.GetFileName(path),
            MimeType = path.GetMimeType(),
            SourceType = "path"
        };

        public static Payload FromFileInfo(FileInfo fileInfo) =>
            FromPath(fileInfo.FullName);

        public static Payload FromStream(Stream stream, string filename, string mimeType) => new Payload
        {
            Data = stream,
            Filename = filename,
            MimeType = mimeType,
            SourceType = "stream"
        };

        public static Payload FromBinary(byte[] bytes) => new Payload
        {
            Data = bytes,
            SourceType = "bytes"
        };

        public static Payload FromString(string multipart)
        {
            return FromBinary(System.Text.Encoding.UTF8.GetBytes(multipart));
        }

        public  byte[] ToBinary()
        {
            return Data as byte[] ?? Array.Empty<byte>();
        }

        public override string ToString()
        {
            return System.Text.Encoding.UTF8.GetString(ToBinary() , 0, ToBinary().Length);
        }

    }
}
