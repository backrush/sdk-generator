using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Web;

namespace Appwrite
{
    public class Client
    {
        // private final OkHttpClient http;

        private readonly HttpClient http;

        // private final Map<String, String> headers;

        private readonly Dictionary<string, string> headers;

        // private final Map<String, String> config;

        private readonly Dictionary<string, string> config;

        private string endPoint;
        private bool selfSigned;
        //private CookieJar cookieJar = CookieJar.NO_COOKIES;

        CookieContainer cookieJar = new CookieContainer();

        public Client() : this("https://appwrite.io/v1", false, new HttpClient())
        {

        }

        public Client(string endPoint, bool selfSigned, HttpClient http)
        {
            this.endPoint = endPoint;
            this.selfSigned = selfSigned;
            this.headers = new Dictionary<string, string>()
            {
                { "content-type", "application/json" },
                { "x-sdk-version", "appwrite:csharp:0.0.1" }
            };
            this.config = new Dictionary<string, string>();
            this.http = http;

            // this.http.

            // coockie container ?? 
                    // this.http.
        }

        public string getEndPoint()
        {
            return endPoint;
        }

        public Dictionary<string, string> getConfig()
        {
            return config;
        }

        //    private Future<Directory> getCookiePath() {
        //        final directory = getApplicationDocumentsDirectory();
        //        final path = directory.path;
        //        final Directory dir = new Directory("$path/cookies");
        //        dir.create();
        //        return dir;
        //    }

        /// Your project ID
        public Client setProject(string value)
        {
            config.Add("project", value);
            addHeader("X-Appwrite-Project", value);
            return this;
        }

        public Client setLocale(string value)
        {
            config.Add("locale", value);
            addHeader("X-Appwrite-Locale", value);
            return this;
        }

        public Client setSelfSigned(bool status)
        {
            selfSigned = status;
            return this;
        }

        public Client setEndpoint(string endPoint)
        {
            this.endPoint = endPoint;
            return this;
        }

        public Client addHeader(String key, String value)
        {
            headers.Add(key, value);
            return this;
        }

        public async Task<HttpResponseMessage> call(string method, string path, Dictionary<string, string> headers, Dictionary<string, object> parameters)
        {
            if (selfSigned)
            {
                // TODO Allow self signed requests ? 
            }

            if ("GET".Equals(method, StringComparison.InvariantCultureIgnoreCase))
            {
                var query = HttpUtility.ParseQueryString(string.Empty);

                foreach (var parameter in parameters)
                {
                    query[parameter.Key] = parameter.Value.ToString();
                }                
                HttpRequestMessage getRequest = new HttpRequestMessage(new HttpMethod(method), endPoint + path + "?" + query.ToString());

                foreach (var header in headers)
                {
                    getRequest.Headers.Add(header.Key, header.Value);
                }

                return await http.SendAsync(getRequest);

            }

            HttpRequestMessage req = new HttpRequestMessage(new HttpMethod(method), endPoint);

            string body = null;

            if ("multipart/form-data".Equals(headers["content-type"], StringComparison.InvariantCultureIgnoreCase))                
            {
                // TODO
            }
            else
            {
                body = DictionaryToJson(parameters);
            }

            req.Content = new StringContent(body, Encoding.UTF8, "application/json");

            HttpResponseMessage httpResponseMessage = await http.SendAsync(req);

            return httpResponseMessage;
        }

        private string DictionaryToJson(Dictionary<string, object> dict)
        {
            var entries = dict.Select(d => string.Format("\"{0}\": [{1}]", d.Key, string.Join(",", d.Value)));

            return "{" + string.Join(",", entries) + "}";
        }
    }
}
