{% macro parameter(parameter) %}
{% if parameter.name == 'orderType' %}{{ 'OrderType orderType' }}{% else %}
{{ parameter.type | typeName }} {{ parameter.name | caseCamel }}{{ parameter | escapeDollarSign | paramDefault }}{% endif %}
{% endmacro %}
{% macro method_parameters(parameters) %}
{% if parameters.all|length > 0 %}{% for parameter in parameters.all %}{{ _self.parameter(parameter) }}{% if not loop.last %}{{ ', ' }}{% endif %}{% endfor %}{% endif %}
{% endmacro %}
{% macro map_parameter(parameter) %}
{% if parameter.name == 'orderType' %}{{ parameter.name | caseCamel ~ '.name()'}}{% else %}
{{ parameter.name | caseCamel }}{% endif %}
{% endmacro %}
{% macro methodNeedsSecurityParameters(method) %}
{% if (method.type == "webAuth" or method.type == "location") and method.security|length > 0 %}{{ true }}{% else %}{{false}}{% endif %}
{% endmacro %}

using System.Collections.Generic;
using System.Net.Http;

namespace Appwrite
{
    public class {{ service.name | caseUcfirst }} : Service
    {

        public {{ service.name | caseUcfirst }}(Client client) : base(client) { }


    {% for method in service.methods %}

        /// {{ method.title }}
    {% if method.description %}
        /*
    {{ method.description|comment1 }}
        */
    {% endif %}
    public {% if method.type == "location" %}string{% else %}HttpResponseMessage{% endif %} {{ method.name | caseCamel }}({{ _self.method_parameters(method.parameters) }}) 
    {
            string path = "{{ method.path }}"{% for parameter in method.parameters.path %}.replace("{{ '{' ~ parameter.name | caseCamel ~ '}' }}", {{ parameter.name | caseCamel }}){% endfor %};

            Dictionary<string, object> parameters = new Dictionary<string, object>()
            {
    {% for parameter in method.parameters.query | merge(method.parameters.body) %}
                
                    { "{{ parameter.name }}", {{ _self.map_parameter(parameter) }} }{% if not loop.last or _self.methodNeedsSecurityParameters(method) %},{% endif %}

    {% endfor %}
            };
    {% if _self.methodNeedsSecurityParameters(method) %}
    {% for node in method.security %}
    {% for key,header in node|keys %}
                { "{{header|caseLower}}", client.getConfig().get("{{header|caseLower}}") }{% if not loop.last %},{% endif %}

    {% endfor %}
    {% endfor %}
    {% endif %}
            
    
    {% if method.type == 'location' %}
            HttpUrl.Builder httpBuilder = new HttpUrl.Builder().build().newBuilder(client.getEndPoint() + path);
            parameters.forEach((k, v) -> httpBuilder.addQueryParameter(k, v.ToString()));

            return httpBuilder.build().ToString();
    {% else %}
            Dictionary<string, string> headers = new Dictionary<string, string>()
    {{ method.headers|map((header, key) => "            {\"#{key}\", \"#{header}\" }")|join(',\n')|raw }}
            

            return client.Call("{{ method.method | caseUpper }}", path, headers, parameters);
    {% endif %}
    }
    {% endfor %}
    };
}