using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace Appwrite
{
    public class Client
    {
        
        private readonly HttpClient http;

        private readonly Dictionary<string, string> headers;

        private readonly Dictionary<string, string> config;

        private string endPoint;
        
        private bool selfSigned;
        
        CookieContainer cookieJar = new CookieContainer();

        public Client() : this("https://appwrite.io/v1", false, new HttpClient())
        {

        }

        public Client(string endPoint, bool selfSigned, HttpClient http)
        {
            this.endPoint = endPoint;
            this.selfSigned = selfSigned;
            this.headers = new Dictionary<string, string>()
            {
                { "content-type", "application/json" },
                { "x-sdk-version", "appwrite:csharp:0.0.1" }
            };
            this.config = new Dictionary<string, string>();
            this.http = http;

            // coockie container ??                     
        }

        public string GetEndPoint()
        {
            return endPoint;
        }

        public Dictionary<string, string> GetConfig()
        {
            return config;
        }

        /// Your project ID
        public Client SetProject(string value)
        {
            config.Add("project", value);
            AddHeader("X-Appwrite-Project", value);
            return this;
        }

        public Client SetLocale(string value)
        {
            config.Add("locale", value);
            AddHeader("X-Appwrite-Locale", value);
            return this;
        }

        public Client SetSelfSigned(bool status)
        {
            selfSigned = status;
            return this;
        }

        public Client SetEndpoint(string endPoint)
        {
            this.endPoint = endPoint;
            return this;
        }

        public Client AddHeader(String key, String value)
        {
            headers.Add(key, value);
            return this;
        }

        public async Task<HttpResponseMessage> Call(string method, string path, Dictionary<string, string> headers, Dictionary<string, object> parameters)
        {
            if (selfSigned)
            {
                // TODO Allow self signed requests ? 
            }

            if ("GET".Equals(method, StringComparison.InvariantCultureIgnoreCase))
            {                
                HttpRequestMessage getRequest = new HttpRequestMessage(new HttpMethod(method), endPoint + path + "?" + parameters.ToQueryString());

                foreach (var header in headers)
                {
                    getRequest.Headers.Add(header.Key, header.Value);
                }

                return await http.SendAsync(getRequest);

            }

            HttpRequestMessage req = new HttpRequestMessage(new HttpMethod(method), endPoint);

            string body = null;

            if ("multipart/form-data".Equals(headers["content-type"], StringComparison.InvariantCultureIgnoreCase))
            {

                var file = parameters["file"] as byte[];

                using (var content = new MultipartFormDataContent("Upload----" + DateTime.Now.ToString(CultureInfo.InvariantCulture)))
                {
                    content.Add(new StreamContent(new MemoryStream(file)), "bilddatei", "upload.jpg");

                    req.Content = content;
                }
            }
            else
            {
                body = parameters.ToJson();

                req.Content = new StringContent(body, Encoding.UTF8, "application/json");
            }
            
            HttpResponseMessage httpResponseMessage = await http.SendAsync(req);

            return httpResponseMessage;
        }

    }
}
